
LAB1_HW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006314  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080064a4  080064a4  000074a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800655c  0800655c  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800655c  0800655c  00008010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800655c  0800655c  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800655c  0800655c  0000755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006560  08006560  00007560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006564  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001998  20000010  08006574  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019a8  08006574  000089a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140fe  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d9d  00000000  00000000  0001c13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0001eee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ede  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b09  00000000  00000000  00021106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c79  00000000  00000000  00023c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5792  00000000  00000000  00037888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d01a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e8  00000000  00000000  0012d060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00132148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800648c 	.word	0x0800648c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800648c 	.word	0x0800648c

080001d0 <LongPressTimerCb>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#if (Question == QA)
static void LongPressTimerCb(void *argument)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
    (void)argument;
    g_longSent = 1;
 80001d8:	4b08      	ldr	r3, [pc, #32]	@ (80001fc <LongPressTimerCb+0x2c>)
 80001da:	2201      	movs	r2, #1
 80001dc:	701a      	strb	r2, [r3, #0]
    uint8_t evt = BTN_LONG;
 80001de:	2301      	movs	r3, #1
 80001e0:	73fb      	strb	r3, [r7, #15]
    /* 在 ISR/Timer context 下用 0 timeout 送訊息即可 */
    osMessageQueuePut(qBtn, &evt, 0, 0);
 80001e2:	4b07      	ldr	r3, [pc, #28]	@ (8000200 <LongPressTimerCb+0x30>)
 80001e4:	6818      	ldr	r0, [r3, #0]
 80001e6:	f107 010f 	add.w	r1, r7, #15
 80001ea:	2300      	movs	r3, #0
 80001ec:	2200      	movs	r2, #0
 80001ee:	f002 fdfd 	bl	8002dec <osMessageQueuePut>
}
 80001f2:	bf00      	nop
 80001f4:	3710      	adds	r7, #16
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000041 	.word	0x20000041
 8000200:	20000038 	.word	0x20000038

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000208:	f000 fb17 	bl	800083a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020c:	f000 f854 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000210:	f000 f8e6 	bl	80003e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000214:	f000 f896 	bl	8000344 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000218:	f002 f9a8 	bl	800256c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  mBlink = osMutexNew(NULL);
 800021c:	2000      	movs	r0, #0
 800021e:	f002 fb43 	bl	80028a8 <osMutexNew>
 8000222:	4603      	mov	r3, r0
 8000224:	4a18      	ldr	r2, [pc, #96]	@ (8000288 <main+0x84>)
 8000226:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  semTmr = osSemaphoreNew(1, 0, NULL);
 8000228:	2200      	movs	r2, #0
 800022a:	2100      	movs	r1, #0
 800022c:	2001      	movs	r0, #1
 800022e:	f002 fc49 	bl	8002ac4 <osSemaphoreNew>
 8000232:	4603      	mov	r3, r0
 8000234:	4a15      	ldr	r2, [pc, #84]	@ (800028c <main+0x88>)
 8000236:	6013      	str	r3, [r2, #0]
  semBtn = osSemaphoreNew(1, 0, NULL);
  #endif

  // QA：用 queue + 1s timer 通知 Task_1
  #if (Question == QA)
  qBtn  = osMessageQueueNew(4, sizeof(uint8_t), NULL);
 8000238:	2200      	movs	r2, #0
 800023a:	2101      	movs	r1, #1
 800023c:	2004      	movs	r0, #4
 800023e:	f002 fd61 	bl	8002d04 <osMessageQueueNew>
 8000242:	4603      	mov	r3, r0
 8000244:	4a12      	ldr	r2, [pc, #72]	@ (8000290 <main+0x8c>)
 8000246:	6013      	str	r3, [r2, #0]
  tLong = osTimerNew(LongPressTimerCb, osTimerOnce, NULL, NULL);
 8000248:	2300      	movs	r3, #0
 800024a:	2200      	movs	r2, #0
 800024c:	2100      	movs	r1, #0
 800024e:	4811      	ldr	r0, [pc, #68]	@ (8000294 <main+0x90>)
 8000250:	f002 faae 	bl	80027b0 <osTimerNew>
 8000254:	4603      	mov	r3, r0
 8000256:	4a10      	ldr	r2, [pc, #64]	@ (8000298 <main+0x94>)
 8000258:	6013      	str	r3, [r2, #0]
  #endif
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  HAL_TIM_Base_Start_IT(&htim2);
 800025a:	4810      	ldr	r0, [pc, #64]	@ (800029c <main+0x98>)
 800025c:	f001 fd04 	bl	8001c68 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000260:	4a0f      	ldr	r2, [pc, #60]	@ (80002a0 <main+0x9c>)
 8000262:	2100      	movs	r1, #0
 8000264:	480f      	ldr	r0, [pc, #60]	@ (80002a4 <main+0xa0>)
 8000266:	f002 f9e0 	bl	800262a <osThreadNew>
 800026a:	4603      	mov	r3, r0
 800026c:	4a0e      	ldr	r2, [pc, #56]	@ (80002a8 <main+0xa4>)
 800026e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000270:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <main+0xa8>)
 8000272:	2100      	movs	r1, #0
 8000274:	480e      	ldr	r0, [pc, #56]	@ (80002b0 <main+0xac>)
 8000276:	f002 f9d8 	bl	800262a <osThreadNew>
 800027a:	4603      	mov	r3, r0
 800027c:	4a0d      	ldr	r2, [pc, #52]	@ (80002b4 <main+0xb0>)
 800027e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000280:	f002 f998 	bl	80025b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000284:	bf00      	nop
 8000286:	e7fd      	b.n	8000284 <main+0x80>
 8000288:	20000030 	.word	0x20000030
 800028c:	2000002c 	.word	0x2000002c
 8000290:	20000038 	.word	0x20000038
 8000294:	080001d1 	.word	0x080001d1
 8000298:	2000003c 	.word	0x2000003c
 800029c:	20000048 	.word	0x20000048
 80002a0:	080064d4 	.word	0x080064d4
 80002a4:	08000591 	.word	0x08000591
 80002a8:	20000094 	.word	0x20000094
 80002ac:	080064f8 	.word	0x080064f8
 80002b0:	0800063d 	.word	0x0800063d
 80002b4:	20000098 	.word	0x20000098

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b096      	sub	sp, #88	@ 0x58
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0314 	add.w	r3, r7, #20
 80002c2:	2244      	movs	r2, #68	@ 0x44
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f006 f8a6 	bl	8006418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	463b      	mov	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002de:	f000 fe4d 	bl	8000f7c <HAL_PWREx_ControlVoltageScaling>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002e8:	f000 f9e0 	bl	80006ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002ec:	2310      	movs	r3, #16
 80002ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f0:	2301      	movs	r3, #1
 80002f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002f8:	2360      	movs	r3, #96	@ 0x60
 80002fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fc:	2300      	movs	r3, #0
 80002fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fe8f 	bl	8001028 <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000310:	f000 f9cc 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000318:	2300      	movs	r3, #0
 800031a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000328:	463b      	mov	r3, r7
 800032a:	2100      	movs	r1, #0
 800032c:	4618      	mov	r0, r3
 800032e:	f001 fa57 	bl	80017e0 <HAL_RCC_ClockConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000338:	f000 f9b8 	bl	80006ac <Error_Handler>
  }
}
 800033c:	bf00      	nop
 800033e:	3758      	adds	r7, #88	@ 0x58
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000362:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <MX_TIM2_Init+0x98>)
 8000364:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000368:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 800036a:	4b1c      	ldr	r3, [pc, #112]	@ (80003dc <MX_TIM2_Init+0x98>)
 800036c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000370:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <MX_TIM2_Init+0x98>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <MX_TIM2_Init+0x98>)
 800037a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800037e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000380:	4b16      	ldr	r3, [pc, #88]	@ (80003dc <MX_TIM2_Init+0x98>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000386:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <MX_TIM2_Init+0x98>)
 8000388:	2280      	movs	r2, #128	@ 0x80
 800038a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800038c:	4813      	ldr	r0, [pc, #76]	@ (80003dc <MX_TIM2_Init+0x98>)
 800038e:	f001 fc13 	bl	8001bb8 <HAL_TIM_Base_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000398:	f000 f988 	bl	80006ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	4619      	mov	r1, r3
 80003a8:	480c      	ldr	r0, [pc, #48]	@ (80003dc <MX_TIM2_Init+0x98>)
 80003aa:	f001 fdd4 	bl	8001f56 <HAL_TIM_ConfigClockSource>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80003b4:	f000 f97a 	bl	80006ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b8:	2300      	movs	r3, #0
 80003ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4619      	mov	r1, r3
 80003c4:	4805      	ldr	r0, [pc, #20]	@ (80003dc <MX_TIM2_Init+0x98>)
 80003c6:	f001 fff7 	bl	80023b8 <HAL_TIMEx_MasterConfigSynchronization>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80003d0:	f000 f96c 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000048 	.word	0x20000048

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f6:	4b29      	ldr	r3, [pc, #164]	@ (800049c <MX_GPIO_Init+0xbc>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fa:	4a28      	ldr	r2, [pc, #160]	@ (800049c <MX_GPIO_Init+0xbc>)
 80003fc:	f043 0304 	orr.w	r3, r3, #4
 8000400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000402:	4b26      	ldr	r3, [pc, #152]	@ (800049c <MX_GPIO_Init+0xbc>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000406:	f003 0304 	and.w	r3, r3, #4
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040e:	4b23      	ldr	r3, [pc, #140]	@ (800049c <MX_GPIO_Init+0xbc>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000412:	4a22      	ldr	r2, [pc, #136]	@ (800049c <MX_GPIO_Init+0xbc>)
 8000414:	f043 0302 	orr.w	r3, r3, #2
 8000418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800041a:	4b20      	ldr	r3, [pc, #128]	@ (800049c <MX_GPIO_Init+0xbc>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	f003 0302 	and.w	r3, r3, #2
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b1d      	ldr	r3, [pc, #116]	@ (800049c <MX_GPIO_Init+0xbc>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042a:	4a1c      	ldr	r2, [pc, #112]	@ (800049c <MX_GPIO_Init+0xbc>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000432:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <MX_GPIO_Init+0xbc>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000444:	4816      	ldr	r0, [pc, #88]	@ (80004a0 <MX_GPIO_Init+0xc0>)
 8000446:	f000 fd41 	bl	8000ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800044a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800044e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000450:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	4619      	mov	r1, r3
 8000460:	4810      	ldr	r0, [pc, #64]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 8000462:	f000 fb71 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000466:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800046a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046c:	2301      	movs	r3, #1
 800046e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	2300      	movs	r3, #0
 8000476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000478:	f107 030c 	add.w	r3, r7, #12
 800047c:	4619      	mov	r1, r3
 800047e:	4808      	ldr	r0, [pc, #32]	@ (80004a0 <MX_GPIO_Init+0xc0>)
 8000480:	f000 fb62 	bl	8000b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	2105      	movs	r1, #5
 8000488:	2028      	movs	r0, #40	@ 0x28
 800048a:	f000 fb26 	bl	8000ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800048e:	2028      	movs	r0, #40	@ 0x28
 8000490:	f000 fb3f 	bl	8000b12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000494:	bf00      	nop
 8000496:	3720      	adds	r7, #32
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40021000 	.word	0x40021000
 80004a0:	48000400 	.word	0x48000400
 80004a4:	48000800 	.word	0x48000800

080004a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin != BUTTON_Pin) return; //先確認就是 USER 按鍵
 80004b2:	88fb      	ldrh	r3, [r7, #6]
 80004b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004b8:	d144      	bne.n	8000544 <HAL_GPIO_EXTI_Callback+0x9c>
	// 共用：50 ms 去彈保持
	uint32_t now = HAL_GetTick();
 80004ba:	f000 fa27 	bl	800090c <HAL_GetTick>
 80004be:	6178      	str	r0, [r7, #20]
	if (now - g_lastBtnTick < 50) return;
 80004c0:	4b23      	ldr	r3, [pc, #140]	@ (8000550 <HAL_GPIO_EXTI_Callback+0xa8>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	697a      	ldr	r2, [r7, #20]
 80004c6:	1ad3      	subs	r3, r2, r3
 80004c8:	2b31      	cmp	r3, #49	@ 0x31
 80004ca:	d93d      	bls.n	8000548 <HAL_GPIO_EXTI_Callback+0xa0>
	g_lastBtnTick = now;
 80004cc:	4a20      	ldr	r2, [pc, #128]	@ (8000550 <HAL_GPIO_EXTI_Callback+0xa8>)
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	6013      	str	r3, [r2, #0]
	if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET) {
	    osSemaphoreRelease(semBtn);
	}

#elif (Question == QA)
    GPIO_PinState s = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80004d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d6:	481f      	ldr	r0, [pc, #124]	@ (8000554 <HAL_GPIO_EXTI_Callback+0xac>)
 80004d8:	f000 fce0 	bl	8000e9c <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	74fb      	strb	r3, [r7, #19]

    if (s == GPIO_PIN_RESET) {                // 按下（B-L475E：按下=低）
 80004e0:	7cfb      	ldrb	r3, [r7, #19]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10d      	bne.n	8000502 <HAL_GPIO_EXTI_Callback+0x5a>
        if (!g_btnPressed) {
 80004e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000558 <HAL_GPIO_EXTI_Callback+0xb0>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d12c      	bne.n	800054a <HAL_GPIO_EXTI_Callback+0xa2>
            g_btnPressed = 1;
 80004f0:	4b19      	ldr	r3, [pc, #100]	@ (8000558 <HAL_GPIO_EXTI_Callback+0xb0>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
            g_pressMs    = HAL_GetTick();     // 開始計時（毫秒）
 80004f6:	f000 fa09 	bl	800090c <HAL_GetTick>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a17      	ldr	r2, [pc, #92]	@ (800055c <HAL_GPIO_EXTI_Callback+0xb4>)
 80004fe:	6013      	str	r3, [r2, #0]
 8000500:	e023      	b.n	800054a <HAL_GPIO_EXTI_Callback+0xa2>
        }
    } else {                                   // 放開（高）
        if (g_btnPressed) {
 8000502:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	d01e      	beq.n	800054a <HAL_GPIO_EXTI_Callback+0xa2>
            g_btnPressed = 0;
 800050c:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <HAL_GPIO_EXTI_Callback+0xb0>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
            uint32_t dt = HAL_GetTick() - g_pressMs;
 8000512:	f000 f9fb 	bl	800090c <HAL_GetTick>
 8000516:	4602      	mov	r2, r0
 8000518:	4b10      	ldr	r3, [pc, #64]	@ (800055c <HAL_GPIO_EXTI_Callback+0xb4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	60fb      	str	r3, [r7, #12]
            uint8_t evt = (dt >= 1000) ? BTN_LONG : BTN_SHORT;   // 1秒門檻
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000526:	4293      	cmp	r3, r2
 8000528:	bf8c      	ite	hi
 800052a:	2301      	movhi	r3, #1
 800052c:	2300      	movls	r3, #0
 800052e:	b2db      	uxtb	r3, r3
 8000530:	72fb      	strb	r3, [r7, #11]
            osMessageQueuePut(qBtn, &evt, 0, 0);
 8000532:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000534:	6818      	ldr	r0, [r3, #0]
 8000536:	f107 010b 	add.w	r1, r7, #11
 800053a:	2300      	movs	r3, #0
 800053c:	2200      	movs	r2, #0
 800053e:	f002 fc55 	bl	8002dec <osMessageQueuePut>
 8000542:	e002      	b.n	800054a <HAL_GPIO_EXTI_Callback+0xa2>
	if (GPIO_Pin != BUTTON_Pin) return; //先確認就是 USER 按鍵
 8000544:	bf00      	nop
 8000546:	e000      	b.n	800054a <HAL_GPIO_EXTI_Callback+0xa2>
	if (now - g_lastBtnTick < 50) return;
 8000548:	bf00      	nop
        }
    }
#endif
}
 800054a:	3718      	adds	r7, #24
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000034 	.word	0x20000034
 8000554:	48000800 	.word	0x48000800
 8000558:	20000040 	.word	0x20000040
 800055c:	20000044 	.word	0x20000044
 8000560:	20000038 	.word	0x20000038

08000564 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {                  // your 10s timer
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a06      	ldr	r2, [pc, #24]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d104      	bne.n	800057e <HAL_TIM_PeriodElapsedCallback+0x1a>
        (void)osSemaphoreRelease(semTmr);  // wake Task_2
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f002 fb7f 	bl	8002c7c <osSemaphoreRelease>
    }
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000048 	.word	0x20000048
 800058c:	2000002c 	.word	0x2000002c

08000590 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
      osMutexRelease(mBlink);

#elif (Question == QA)
      uint8_t evt;
      osMessageQueueGet(qBtn, &evt, NULL, osWaitForever);  // QA：等短/長按事件
 8000598:	4b25      	ldr	r3, [pc, #148]	@ (8000630 <StartDefaultTask+0xa0>)
 800059a:	6818      	ldr	r0, [r3, #0]
 800059c:	f107 010f 	add.w	r1, r7, #15
 80005a0:	f04f 33ff 	mov.w	r3, #4294967295
 80005a4:	2200      	movs	r2, #0
 80005a6:	f002 fc81 	bl	8002eac <osMessageQueueGet>
      osMutexAcquire(mBlink, osWaitForever);
 80005aa:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <StartDefaultTask+0xa4>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f04f 31ff 	mov.w	r1, #4294967295
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 f9fe 	bl	80029b4 <osMutexAcquire>

      if (evt == BTN_SHORT) {           // 5 s @ 1 Hz
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d116      	bne.n	80005ec <StartDefaultTask+0x5c>
          uint32_t t0 = osKernelGetTickCount();
 80005be:	f002 f81f 	bl	8002600 <osKernelGetTickCount>
 80005c2:	6138      	str	r0, [r7, #16]
          while ((osKernelGetTickCount() - t0) < 5000) {
 80005c4:	e008      	b.n	80005d8 <StartDefaultTask+0x48>
              HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80005c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ca:	481b      	ldr	r0, [pc, #108]	@ (8000638 <StartDefaultTask+0xa8>)
 80005cc:	f000 fc96 	bl	8000efc <HAL_GPIO_TogglePin>
              osDelay(500);
 80005d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005d4:	f002 f8bb 	bl	800274e <osDelay>
          while ((osKernelGetTickCount() - t0) < 5000) {
 80005d8:	f002 f812 	bl	8002600 <osKernelGetTickCount>
 80005dc:	4602      	mov	r2, r0
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d9ed      	bls.n	80005c6 <StartDefaultTask+0x36>
 80005ea:	e014      	b.n	8000616 <StartDefaultTask+0x86>
          }
      } else {                           // BTN_LONG → 5 s @ 10 Hz
          uint32_t t0 = osKernelGetTickCount();
 80005ec:	f002 f808 	bl	8002600 <osKernelGetTickCount>
 80005f0:	6178      	str	r0, [r7, #20]
          while ((osKernelGetTickCount() - t0) < 5000) {
 80005f2:	e007      	b.n	8000604 <StartDefaultTask+0x74>
              HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80005f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f8:	480f      	ldr	r0, [pc, #60]	@ (8000638 <StartDefaultTask+0xa8>)
 80005fa:	f000 fc7f 	bl	8000efc <HAL_GPIO_TogglePin>
              osDelay(50);
 80005fe:	2032      	movs	r0, #50	@ 0x32
 8000600:	f002 f8a5 	bl	800274e <osDelay>
          while ((osKernelGetTickCount() - t0) < 5000) {
 8000604:	f001 fffc 	bl	8002600 <osKernelGetTickCount>
 8000608:	4602      	mov	r2, r0
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000612:	4293      	cmp	r3, r2
 8000614:	d9ee      	bls.n	80005f4 <StartDefaultTask+0x64>
          }
      }
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800061c:	4806      	ldr	r0, [pc, #24]	@ (8000638 <StartDefaultTask+0xa8>)
 800061e:	f000 fc55 	bl	8000ecc <HAL_GPIO_WritePin>
      osMutexRelease(mBlink);
 8000622:	4b04      	ldr	r3, [pc, #16]	@ (8000634 <StartDefaultTask+0xa4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fa0f 	bl	8002a4a <osMutexRelease>
  {
 800062c:	e7b4      	b.n	8000598 <StartDefaultTask+0x8>
 800062e:	bf00      	nop
 8000630:	20000038 	.word	0x20000038
 8000634:	20000030 	.word	0x20000030
 8000638:	48000400 	.word	0x48000400

0800063c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
      // sleep until timer ISR signals (every 10 s)
      osSemaphoreAcquire(semTmr, osWaitForever);
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <StartTask02+0x64>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f04f 31ff 	mov.w	r1, #4294967295
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fac3 	bl	8002bd8 <osSemaphoreAcquire>

      // enter critical blinking section
      osMutexAcquire(mBlink, osWaitForever);
 8000652:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <StartTask02+0x68>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f04f 31ff 	mov.w	r1, #4294967295
 800065a:	4618      	mov	r0, r3
 800065c:	f002 f9aa 	bl	80029b4 <osMutexAcquire>

      uint32_t t0 = osKernelGetTickCount();
 8000660:	f001 ffce 	bl	8002600 <osKernelGetTickCount>
 8000664:	60f8      	str	r0, [r7, #12]
      while ((osKernelGetTickCount() - t0) < 2000) {   // 2 s burst
 8000666:	e007      	b.n	8000678 <StartTask02+0x3c>
          HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000668:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066c:	480e      	ldr	r0, [pc, #56]	@ (80006a8 <StartTask02+0x6c>)
 800066e:	f000 fc45 	bl	8000efc <HAL_GPIO_TogglePin>
          osDelay(50);                                 // 10 Hz blink: 50 ms per half-cycle
 8000672:	2032      	movs	r0, #50	@ 0x32
 8000674:	f002 f86b 	bl	800274e <osDelay>
      while ((osKernelGetTickCount() - t0) < 2000) {   // 2 s burst
 8000678:	f001 ffc2 	bl	8002600 <osKernelGetTickCount>
 800067c:	4602      	mov	r2, r0
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000686:	d3ef      	bcc.n	8000668 <StartTask02+0x2c>
      }
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800068e:	4806      	ldr	r0, [pc, #24]	@ (80006a8 <StartTask02+0x6c>)
 8000690:	f000 fc1c 	bl	8000ecc <HAL_GPIO_WritePin>

      osMutexRelease(mBlink);
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <StartTask02+0x68>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f002 f9d6 	bl	8002a4a <osMutexRelease>
  {
 800069e:	e7d1      	b.n	8000644 <StartTask02+0x8>
 80006a0:	2000002c 	.word	0x2000002c
 80006a4:	20000030 	.word	0x20000030
 80006a8:	48000400 	.word	0x48000400

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <Error_Handler+0x8>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <HAL_MspInit+0x4c>)
 80006c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006c2:	4a10      	ldr	r2, [pc, #64]	@ (8000704 <HAL_MspInit+0x4c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <HAL_MspInit+0x4c>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <HAL_MspInit+0x4c>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006da:	4a0a      	ldr	r2, [pc, #40]	@ (8000704 <HAL_MspInit+0x4c>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <HAL_MspInit+0x4c>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	210f      	movs	r1, #15
 80006f2:	f06f 0001 	mvn.w	r0, #1
 80006f6:	f000 f9f0 	bl	8000ada <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000718:	d113      	bne.n	8000742 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <HAL_TIM_Base_MspInit+0x44>)
 800071c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800071e:	4a0b      	ldr	r2, [pc, #44]	@ (800074c <HAL_TIM_Base_MspInit+0x44>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6593      	str	r3, [r2, #88]	@ 0x58
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <HAL_TIM_Base_MspInit+0x44>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2105      	movs	r1, #5
 8000736:	201c      	movs	r0, #28
 8000738:	f000 f9cf 	bl	8000ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800073c:	201c      	movs	r0, #28
 800073e:	f000 f9e8 	bl	8000b12 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <NMI_Handler+0x4>

08000758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <MemManage_Handler+0x4>

08000768 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <BusFault_Handler+0x4>

08000770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <UsageFault_Handler+0x4>

08000778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078a:	f000 f8ab 	bl	80008e4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800078e:	f004 fc03 	bl	8004f98 <xTaskGetSchedulerState>
 8000792:	4603      	mov	r3, r0
 8000794:	2b01      	cmp	r3, #1
 8000796:	d001      	beq.n	800079c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000798:	f005 fbbe 	bl	8005f18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007a4:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <TIM2_IRQHandler+0x10>)
 80007a6:	f001 facf 	bl	8001d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000048 	.word	0x20000048

080007b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80007b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007bc:	f000 fbb8 	bl	8000f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <SystemInit+0x20>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ce:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <SystemInit+0x20>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000820 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007ec:	f7ff ffea 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	@ (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	@ (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	@ (8000834 <LoopForever+0x16>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000816:	f005 fe07 	bl	8006428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800081a:	f7ff fcf3 	bl	8000204 <main>

0800081e <LoopForever>:

LoopForever:
    b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000820:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800082c:	08006564 	.word	0x08006564
  ldr r2, =_sbss
 8000830:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000834:	200019a8 	.word	0x200019a8

08000838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_2_IRQHandler>

0800083a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f93d 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800084a:	200f      	movs	r0, #15
 800084c:	f000 f80e 	bl	800086c <HAL_InitTick>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	e001      	b.n	8000860 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800085c:	f7ff ff2c 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000860:	79fb      	ldrb	r3, [r7, #7]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <HAL_InitTick+0x6c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d023      	beq.n	80008c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000880:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <HAL_InitTick+0x70>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <HAL_InitTick+0x6c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000892:	fbb2 f3f3 	udiv	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f949 	bl	8000b2e <HAL_SYSTICK_Config>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d10f      	bne.n	80008c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d809      	bhi.n	80008bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 f913 	bl	8000ada <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008b4:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <HAL_InitTick+0x74>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
 80008ba:	e007      	b.n	80008cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	73fb      	strb	r3, [r7, #15]
 80008c0:	e004      	b.n	80008cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]
 80008c6:	e001      	b.n	80008cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_IncTick+0x20>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <HAL_IncTick+0x24>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a04      	ldr	r2, [pc, #16]	@ (8000908 <HAL_IncTick+0x24>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000008 	.word	0x20000008
 8000908:	2000009c 	.word	0x2000009c

0800090c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <HAL_GetTick+0x14>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	2000009c 	.word	0x2000009c

08000924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000940:	4013      	ands	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800094c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000956:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	60d3      	str	r3, [r2, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000970:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <__NVIC_GetPriorityGrouping+0x18>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	f003 0307 	and.w	r3, r3, #7
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	2b00      	cmp	r3, #0
 8000998:	db0b      	blt.n	80009b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f003 021f 	and.w	r2, r3, #31
 80009a0:	4907      	ldr	r1, [pc, #28]	@ (80009c0 <__NVIC_EnableIRQ+0x38>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	095b      	lsrs	r3, r3, #5
 80009a8:	2001      	movs	r0, #1
 80009aa:	fa00 f202 	lsl.w	r2, r0, r2
 80009ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000e100 	.word	0xe000e100

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db0a      	blt.n	80009ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	490c      	ldr	r1, [pc, #48]	@ (8000a10 <__NVIC_SetPriority+0x4c>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ec:	e00a      	b.n	8000a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4908      	ldr	r1, [pc, #32]	@ (8000a14 <__NVIC_SetPriority+0x50>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	761a      	strb	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	@ 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	bf28      	it	cs
 8000a36:	2304      	movcs	r3, #4
 8000a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d902      	bls.n	8000a48 <NVIC_EncodePriority+0x30>
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3b03      	subs	r3, #3
 8000a46:	e000      	b.n	8000a4a <NVIC_EncodePriority+0x32>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	@ 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff8e 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff29 	bl	8000924 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff3e 	bl	800096c <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff8e 	bl	8000a18 <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5d 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff31 	bl	8000988 <__NVIC_EnableIRQ>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffa2 	bl	8000a80 <SysTick_Config>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b087      	sub	sp, #28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b56:	e17f      	b.n	8000e58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	4013      	ands	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 8171 	beq.w	8000e52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d005      	beq.n	8000b88 <HAL_GPIO_Init+0x40>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d130      	bne.n	8000bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	2203      	movs	r2, #3
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	f003 0201 	and.w	r2, r3, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0303 	and.w	r3, r3, #3
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d118      	bne.n	8000c28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	08db      	lsrs	r3, r3, #3
 8000c12:	f003 0201 	and.w	r2, r3, #1
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d017      	beq.n	8000c64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	2203      	movs	r2, #3
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d123      	bne.n	8000cb8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	08da      	lsrs	r2, r3, #3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3208      	adds	r2, #8
 8000c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f003 0307 	and.w	r3, r3, #7
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	220f      	movs	r2, #15
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	691a      	ldr	r2, [r3, #16]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	08da      	lsrs	r2, r3, #3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3208      	adds	r2, #8
 8000cb2:	6939      	ldr	r1, [r7, #16]
 8000cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0203 	and.w	r2, r3, #3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 80ac 	beq.w	8000e52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b5f      	ldr	r3, [pc, #380]	@ (8000e78 <HAL_GPIO_Init+0x330>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfe:	4a5e      	ldr	r2, [pc, #376]	@ (8000e78 <HAL_GPIO_Init+0x330>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d06:	4b5c      	ldr	r3, [pc, #368]	@ (8000e78 <HAL_GPIO_Init+0x330>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d12:	4a5a      	ldr	r2, [pc, #360]	@ (8000e7c <HAL_GPIO_Init+0x334>)
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	3302      	adds	r3, #2
 8000d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	220f      	movs	r2, #15
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d3c:	d025      	beq.n	8000d8a <HAL_GPIO_Init+0x242>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a4f      	ldr	r2, [pc, #316]	@ (8000e80 <HAL_GPIO_Init+0x338>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d01f      	beq.n	8000d86 <HAL_GPIO_Init+0x23e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a4e      	ldr	r2, [pc, #312]	@ (8000e84 <HAL_GPIO_Init+0x33c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d019      	beq.n	8000d82 <HAL_GPIO_Init+0x23a>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4d      	ldr	r2, [pc, #308]	@ (8000e88 <HAL_GPIO_Init+0x340>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d013      	beq.n	8000d7e <HAL_GPIO_Init+0x236>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4c      	ldr	r2, [pc, #304]	@ (8000e8c <HAL_GPIO_Init+0x344>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00d      	beq.n	8000d7a <HAL_GPIO_Init+0x232>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4b      	ldr	r2, [pc, #300]	@ (8000e90 <HAL_GPIO_Init+0x348>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d007      	beq.n	8000d76 <HAL_GPIO_Init+0x22e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4a      	ldr	r2, [pc, #296]	@ (8000e94 <HAL_GPIO_Init+0x34c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_GPIO_Init+0x22a>
 8000d6e:	2306      	movs	r3, #6
 8000d70:	e00c      	b.n	8000d8c <HAL_GPIO_Init+0x244>
 8000d72:	2307      	movs	r3, #7
 8000d74:	e00a      	b.n	8000d8c <HAL_GPIO_Init+0x244>
 8000d76:	2305      	movs	r3, #5
 8000d78:	e008      	b.n	8000d8c <HAL_GPIO_Init+0x244>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	e006      	b.n	8000d8c <HAL_GPIO_Init+0x244>
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e004      	b.n	8000d8c <HAL_GPIO_Init+0x244>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e002      	b.n	8000d8c <HAL_GPIO_Init+0x244>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <HAL_GPIO_Init+0x244>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	f002 0203 	and.w	r2, r2, #3
 8000d92:	0092      	lsls	r2, r2, #2
 8000d94:	4093      	lsls	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d9c:	4937      	ldr	r1, [pc, #220]	@ (8000e7c <HAL_GPIO_Init+0x334>)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000daa:	4b3b      	ldr	r3, [pc, #236]	@ (8000e98 <HAL_GPIO_Init+0x350>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dce:	4a32      	ldr	r2, [pc, #200]	@ (8000e98 <HAL_GPIO_Init+0x350>)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dd4:	4b30      	ldr	r3, [pc, #192]	@ (8000e98 <HAL_GPIO_Init+0x350>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000df8:	4a27      	ldr	r2, [pc, #156]	@ (8000e98 <HAL_GPIO_Init+0x350>)
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dfe:	4b26      	ldr	r3, [pc, #152]	@ (8000e98 <HAL_GPIO_Init+0x350>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e22:	4a1d      	ldr	r2, [pc, #116]	@ (8000e98 <HAL_GPIO_Init+0x350>)
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <HAL_GPIO_Init+0x350>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e4c:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <HAL_GPIO_Init+0x350>)
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f47f ae78 	bne.w	8000b58 <HAL_GPIO_Init+0x10>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	371c      	adds	r7, #28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	48000400 	.word	0x48000400
 8000e84:	48000800 	.word	0x48000800
 8000e88:	48000c00 	.word	0x48000c00
 8000e8c:	48001000 	.word	0x48001000
 8000e90:	48001400 	.word	0x48001400
 8000e94:	48001800 	.word	0x48001800
 8000e98:	40010400 	.word	0x40010400

08000e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e001      	b.n	8000ebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000edc:	787b      	ldrb	r3, [r7, #1]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee2:	887a      	ldrh	r2, [r7, #2]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4013      	ands	r3, r2
 8000f14:	041a      	lsls	r2, r3, #16
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43d9      	mvns	r1, r3
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	619a      	str	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	4013      	ands	r3, r2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f46:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff faaa 	bl	80004a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40010400 	.word	0x40010400

08000f60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f64:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40007000 	.word	0x40007000

08000f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f8a:	d130      	bne.n	8000fee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f8c:	4b23      	ldr	r3, [pc, #140]	@ (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f98:	d038      	beq.n	800100c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9a:	4b20      	ldr	r3, [pc, #128]	@ (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2232      	movs	r2, #50	@ 0x32
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	0c9b      	lsrs	r3, r3, #18
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc0:	e002      	b.n	8000fc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc8:	4b14      	ldr	r3, [pc, #80]	@ (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fd4:	d102      	bne.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f2      	bne.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fe8:	d110      	bne.n	800100c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e00f      	b.n	800100e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ffa:	d007      	beq.n	800100c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001004:	4a05      	ldr	r2, [pc, #20]	@ (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800100a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40007000 	.word	0x40007000
 8001020:	20000000 	.word	0x20000000
 8001024:	431bde83 	.word	0x431bde83

08001028 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e3ca      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800103a:	4b97      	ldr	r3, [pc, #604]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001044:	4b94      	ldr	r3, [pc, #592]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80e4 	beq.w	8001224 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <HAL_RCC_OscConfig+0x4a>
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	2b0c      	cmp	r3, #12
 8001066:	f040 808b 	bne.w	8001180 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2b01      	cmp	r3, #1
 800106e:	f040 8087 	bne.w	8001180 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001072:	4b89      	ldr	r3, [pc, #548]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_RCC_OscConfig+0x62>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e3a2      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a1a      	ldr	r2, [r3, #32]
 800108e:	4b82      	ldr	r3, [pc, #520]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <HAL_RCC_OscConfig+0x7c>
 800109a:	4b7f      	ldr	r3, [pc, #508]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010a2:	e005      	b.n	80010b0 <HAL_RCC_OscConfig+0x88>
 80010a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80010a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d223      	bcs.n	80010fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fd1d 	bl	8001af8 <RCC_SetFlashLatencyFromMSIRange>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e383      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c8:	4b73      	ldr	r3, [pc, #460]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a72      	ldr	r2, [pc, #456]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b70      	ldr	r3, [pc, #448]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	496d      	ldr	r1, [pc, #436]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	4968      	ldr	r1, [pc, #416]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	604b      	str	r3, [r1, #4]
 80010fa:	e025      	b.n	8001148 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010fc:	4b66      	ldr	r3, [pc, #408]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a65      	ldr	r2, [pc, #404]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b63      	ldr	r3, [pc, #396]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4960      	ldr	r1, [pc, #384]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800111a:	4b5f      	ldr	r3, [pc, #380]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	495b      	ldr	r1, [pc, #364]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 800112a:	4313      	orrs	r3, r2
 800112c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fcdd 	bl	8001af8 <RCC_SetFlashLatencyFromMSIRange>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e343      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001148:	f000 fc4a 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 800114c:	4602      	mov	r2, r0
 800114e:	4b52      	ldr	r3, [pc, #328]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	4950      	ldr	r1, [pc, #320]	@ (800129c <HAL_RCC_OscConfig+0x274>)
 800115a:	5ccb      	ldrb	r3, [r1, r3]
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	4a4e      	ldr	r2, [pc, #312]	@ (80012a0 <HAL_RCC_OscConfig+0x278>)
 8001166:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001168:	4b4e      	ldr	r3, [pc, #312]	@ (80012a4 <HAL_RCC_OscConfig+0x27c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fb7d 	bl	800086c <HAL_InitTick>
 8001172:	4603      	mov	r3, r0
 8001174:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d052      	beq.n	8001222 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	e327      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d032      	beq.n	80011ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001188:	4b43      	ldr	r3, [pc, #268]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a42      	ldr	r2, [pc, #264]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001194:	f7ff fbba 	bl	800090c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800119c:	f7ff fbb6 	bl	800090c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e310      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ba:	4b37      	ldr	r3, [pc, #220]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a36      	ldr	r2, [pc, #216]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4931      	ldr	r1, [pc, #196]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	492c      	ldr	r1, [pc, #176]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
 80011ec:	e01a      	b.n	8001224 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a29      	ldr	r2, [pc, #164]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011fa:	f7ff fb87 	bl	800090c <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001202:	f7ff fb83 	bl	800090c <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e2dd      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001214:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f0      	bne.n	8001202 <HAL_RCC_OscConfig+0x1da>
 8001220:	e000      	b.n	8001224 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001222:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d074      	beq.n	800131a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2b08      	cmp	r3, #8
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x21a>
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b0c      	cmp	r3, #12
 800123a:	d10e      	bne.n	800125a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d10b      	bne.n	800125a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d064      	beq.n	8001318 <HAL_RCC_OscConfig+0x2f0>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d160      	bne.n	8001318 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e2ba      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001262:	d106      	bne.n	8001272 <HAL_RCC_OscConfig+0x24a>
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0b      	ldr	r2, [pc, #44]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 800126a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e026      	b.n	80012c0 <HAL_RCC_OscConfig+0x298>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800127a:	d115      	bne.n	80012a8 <HAL_RCC_OscConfig+0x280>
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 8001282:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a02      	ldr	r2, [pc, #8]	@ (8001298 <HAL_RCC_OscConfig+0x270>)
 800128e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	e014      	b.n	80012c0 <HAL_RCC_OscConfig+0x298>
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	0800651c 	.word	0x0800651c
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000004 	.word	0x20000004
 80012a8:	4ba0      	ldr	r3, [pc, #640]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a9f      	ldr	r2, [pc, #636]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b9d      	ldr	r3, [pc, #628]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a9c      	ldr	r2, [pc, #624]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fb20 	bl	800090c <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fb1c 	bl	800090c <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	@ 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e276      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e2:	4b92      	ldr	r3, [pc, #584]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x2a8>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fb0c 	bl	800090c <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fb08 	bl	800090c <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	@ 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e262      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800130a:	4b88      	ldr	r3, [pc, #544]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x2d0>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d060      	beq.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b04      	cmp	r3, #4
 800132a:	d005      	beq.n	8001338 <HAL_RCC_OscConfig+0x310>
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b0c      	cmp	r3, #12
 8001330:	d119      	bne.n	8001366 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d116      	bne.n	8001366 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001338:	4b7c      	ldr	r3, [pc, #496]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_RCC_OscConfig+0x328>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e23f      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001350:	4b76      	ldr	r3, [pc, #472]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	061b      	lsls	r3, r3, #24
 800135e:	4973      	ldr	r1, [pc, #460]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001364:	e040      	b.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d023      	beq.n	80013b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800136e:	4b6f      	ldr	r3, [pc, #444]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6e      	ldr	r2, [pc, #440]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fac7 	bl	800090c <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fac3 	bl	800090c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e21d      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001394:	4b65      	ldr	r3, [pc, #404]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b62      	ldr	r3, [pc, #392]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	495f      	ldr	r1, [pc, #380]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
 80013b4:	e018      	b.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b6:	4b5d      	ldr	r3, [pc, #372]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a5c      	ldr	r2, [pc, #368]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80013bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff faa3 	bl	800090c <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fa9f 	bl	800090c <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1f9      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013dc:	4b53      	ldr	r3, [pc, #332]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d03c      	beq.n	800146e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01c      	beq.n	8001436 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fc:	4b4b      	ldr	r3, [pc, #300]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80013fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001402:	4a4a      	ldr	r2, [pc, #296]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140c:	f7ff fa7e 	bl	800090c <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff fa7a 	bl	800090c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1d4      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001426:	4b41      	ldr	r3, [pc, #260]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0ef      	beq.n	8001414 <HAL_RCC_OscConfig+0x3ec>
 8001434:	e01b      	b.n	800146e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001436:	4b3d      	ldr	r3, [pc, #244]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800143c:	4a3b      	ldr	r2, [pc, #236]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 800143e:	f023 0301 	bic.w	r3, r3, #1
 8001442:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001446:	f7ff fa61 	bl	800090c <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144e:	f7ff fa5d 	bl	800090c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e1b7      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001460:	4b32      	ldr	r3, [pc, #200]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1ef      	bne.n	800144e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 80a6 	beq.w	80015c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001480:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10d      	bne.n	80014a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	4b27      	ldr	r3, [pc, #156]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001490:	4a26      	ldr	r2, [pc, #152]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001496:	6593      	str	r3, [r2, #88]	@ 0x58
 8001498:	4b24      	ldr	r3, [pc, #144]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a4:	2301      	movs	r3, #1
 80014a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a8:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <HAL_RCC_OscConfig+0x508>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d118      	bne.n	80014e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001530 <HAL_RCC_OscConfig+0x508>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001530 <HAL_RCC_OscConfig+0x508>)
 80014ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fa24 	bl	800090c <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c8:	f7ff fa20 	bl	800090c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e17a      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_RCC_OscConfig+0x508>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d108      	bne.n	8001500 <HAL_RCC_OscConfig+0x4d8>
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80014f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f4:	4a0d      	ldr	r2, [pc, #52]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014fe:	e029      	b.n	8001554 <HAL_RCC_OscConfig+0x52c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d115      	bne.n	8001534 <HAL_RCC_OscConfig+0x50c>
 8001508:	4b08      	ldr	r3, [pc, #32]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800150e:	4a07      	ldr	r2, [pc, #28]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001518:	4b04      	ldr	r3, [pc, #16]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151e:	4a03      	ldr	r2, [pc, #12]	@ (800152c <HAL_RCC_OscConfig+0x504>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001528:	e014      	b.n	8001554 <HAL_RCC_OscConfig+0x52c>
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	40007000 	.word	0x40007000
 8001534:	4b9c      	ldr	r3, [pc, #624]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800153a:	4a9b      	ldr	r2, [pc, #620]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001544:	4b98      	ldr	r3, [pc, #608]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154a:	4a97      	ldr	r2, [pc, #604]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d016      	beq.n	800158a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff f9d6 	bl	800090c <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff f9d2 	bl	800090c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e12a      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800157a:	4b8b      	ldr	r3, [pc, #556]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 800157c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0ed      	beq.n	8001564 <HAL_RCC_OscConfig+0x53c>
 8001588:	e015      	b.n	80015b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff f9bf 	bl	800090c <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff f9bb 	bl	800090c <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e113      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a8:	4b7f      	ldr	r3, [pc, #508]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 80015aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ed      	bne.n	8001592 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b6:	7ffb      	ldrb	r3, [r7, #31]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015bc:	4b7a      	ldr	r3, [pc, #488]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c0:	4a79      	ldr	r2, [pc, #484]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 80015c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80fe 	beq.w	80017ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	f040 80d0 	bne.w	800177c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015dc:	4b72      	ldr	r3, [pc, #456]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f003 0203 	and.w	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d130      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	3b01      	subs	r3, #1
 80015fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	429a      	cmp	r2, r3
 8001600:	d127      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800160c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800160e:	429a      	cmp	r2, r3
 8001610:	d11f      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800161c:	2a07      	cmp	r2, #7
 800161e:	bf14      	ite	ne
 8001620:	2201      	movne	r2, #1
 8001622:	2200      	moveq	r2, #0
 8001624:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001626:	4293      	cmp	r3, r2
 8001628:	d113      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	3b01      	subs	r3, #1
 8001638:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800163a:	429a      	cmp	r2, r3
 800163c:	d109      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	3b01      	subs	r3, #1
 800164c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d06e      	beq.n	8001730 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b0c      	cmp	r3, #12
 8001656:	d069      	beq.n	800172c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001658:	4b53      	ldr	r3, [pc, #332]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001664:	4b50      	ldr	r3, [pc, #320]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0ad      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001674:	4b4c      	ldr	r3, [pc, #304]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a4b      	ldr	r2, [pc, #300]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 800167a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800167e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001680:	f7ff f944 	bl	800090c <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff f940 	bl	800090c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e09a      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169a:	4b43      	ldr	r3, [pc, #268]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a6:	4b40      	ldr	r3, [pc, #256]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <HAL_RCC_OscConfig+0x784>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016b6:	3a01      	subs	r2, #1
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	4311      	orrs	r1, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016c0:	0212      	lsls	r2, r2, #8
 80016c2:	4311      	orrs	r1, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016c8:	0852      	lsrs	r2, r2, #1
 80016ca:	3a01      	subs	r2, #1
 80016cc:	0552      	lsls	r2, r2, #21
 80016ce:	4311      	orrs	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016d4:	0852      	lsrs	r2, r2, #1
 80016d6:	3a01      	subs	r2, #1
 80016d8:	0652      	lsls	r2, r2, #25
 80016da:	4311      	orrs	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016e0:	0912      	lsrs	r2, r2, #4
 80016e2:	0452      	lsls	r2, r2, #17
 80016e4:	430a      	orrs	r2, r1
 80016e6:	4930      	ldr	r1, [pc, #192]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016ec:	4b2e      	ldr	r3, [pc, #184]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a2d      	ldr	r2, [pc, #180]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016f8:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4a2a      	ldr	r2, [pc, #168]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001704:	f7ff f902 	bl	800090c <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff f8fe 	bl	800090c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e058      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800172a:	e050      	b.n	80017ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e04f      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001730:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d148      	bne.n	80017ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800173c:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a19      	ldr	r2, [pc, #100]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001746:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001748:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4a16      	ldr	r2, [pc, #88]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 800174e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001752:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001754:	f7ff f8da 	bl	800090c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f8d6 	bl	800090c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e030      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x734>
 800177a:	e028      	b.n	80017ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d023      	beq.n	80017ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a08      	ldr	r2, [pc, #32]	@ (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001788:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800178c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff f8bd 	bl	800090c <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001794:	e00c      	b.n	80017b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff f8b9 	bl	800090c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d905      	bls.n	80017b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e013      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
 80017a8:	40021000 	.word	0x40021000
 80017ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_RCC_OscConfig+0x7b0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ec      	bne.n	8001796 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_RCC_OscConfig+0x7b0>)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	4905      	ldr	r1, [pc, #20]	@ (80017d8 <HAL_RCC_OscConfig+0x7b0>)
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_RCC_OscConfig+0x7b4>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	60cb      	str	r3, [r1, #12]
 80017c8:	e001      	b.n	80017ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000
 80017dc:	feeefffc 	.word	0xfeeefffc

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0e7      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b75      	ldr	r3, [pc, #468]	@ (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d910      	bls.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b72      	ldr	r3, [pc, #456]	@ (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 0207 	bic.w	r2, r3, #7
 800180a:	4970      	ldr	r1, [pc, #448]	@ (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b6e      	ldr	r3, [pc, #440]	@ (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0cf      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d010      	beq.n	8001852 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4b66      	ldr	r3, [pc, #408]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800183c:	429a      	cmp	r2, r3
 800183e:	d908      	bls.n	8001852 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b63      	ldr	r3, [pc, #396]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4960      	ldr	r1, [pc, #384]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d04c      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001866:	4b5a      	ldr	r3, [pc, #360]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d121      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e0a6      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	4b54      	ldr	r3, [pc, #336]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d115      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e09a      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001896:	4b4e      	ldr	r3, [pc, #312]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e08e      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a6:	4b4a      	ldr	r3, [pc, #296]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e086      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018b6:	4b46      	ldr	r3, [pc, #280]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 0203 	bic.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4943      	ldr	r1, [pc, #268]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018c8:	f7ff f820 	bl	800090c <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7ff f81c 	bl	800090c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e06e      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	4b3a      	ldr	r3, [pc, #232]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 020c 	and.w	r2, r3, #12
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1eb      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d010      	beq.n	8001926 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001910:	429a      	cmp	r2, r3
 8001912:	d208      	bcs.n	8001926 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b2e      	ldr	r3, [pc, #184]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	492b      	ldr	r1, [pc, #172]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001926:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d210      	bcs.n	8001956 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001934:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 0207 	bic.w	r2, r3, #7
 800193c:	4923      	ldr	r1, [pc, #140]	@ (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001944:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e036      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001962:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4918      	ldr	r1, [pc, #96]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4910      	ldr	r1, [pc, #64]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001994:	f000 f824 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	490b      	ldr	r1, [pc, #44]	@ (80019d4 <HAL_RCC_ClockConfig+0x1f4>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	4a09      	ldr	r2, [pc, #36]	@ (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 80019b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019b4:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <HAL_RCC_ClockConfig+0x1fc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe ff57 	bl	800086c <HAL_InitTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80019c2:	7afb      	ldrb	r3, [r7, #11]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40022000 	.word	0x40022000
 80019d0:	40021000 	.word	0x40021000
 80019d4:	0800651c 	.word	0x0800651c
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x34>
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d121      	bne.n	8001a52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d11e      	bne.n	8001a52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a14:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a20:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e005      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10d      	bne.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d102      	bne.n	8001a5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a58:	4b25      	ldr	r3, [pc, #148]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	e004      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a64:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d134      	bne.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d003      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d003      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0xac>
 8001a84:	e005      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a88:	617b      	str	r3, [r7, #20]
      break;
 8001a8a:	e005      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a8e:	617b      	str	r3, [r7, #20]
      break;
 8001a90:	e002      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	617b      	str	r3, [r7, #20]
      break;
 8001a96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	fb03 f202 	mul.w	r2, r3, r2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	0e5b      	lsrs	r3, r3, #25
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	3301      	adds	r3, #1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	@ 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	0800652c 	.word	0x0800652c
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	007a1200 	.word	0x007a1200

08001af8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b04:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b10:	f7ff fa26 	bl	8000f60 <HAL_PWREx_GetVoltageRange>
 8001b14:	6178      	str	r0, [r7, #20]
 8001b16:	e014      	b.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b18:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1c:	4a24      	ldr	r2, [pc, #144]	@ (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b24:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b30:	f7ff fa16 	bl	8000f60 <HAL_PWREx_GetVoltageRange>
 8001b34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b40:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b48:	d10b      	bne.n	8001b62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b80      	cmp	r3, #128	@ 0x80
 8001b4e:	d919      	bls.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b54:	d902      	bls.n	8001b5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b56:	2302      	movs	r3, #2
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	e013      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	e010      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b80      	cmp	r3, #128	@ 0x80
 8001b66:	d902      	bls.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b68:	2303      	movs	r3, #3
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	e00a      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b80      	cmp	r3, #128	@ 0x80
 8001b72:	d102      	bne.n	8001b7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b74:	2302      	movs	r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	e004      	b.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b70      	cmp	r3, #112	@ 0x70
 8001b7e:	d101      	bne.n	8001b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b80:	2301      	movs	r3, #1
 8001b82:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 0207 	bic.w	r2, r3, #7
 8001b8c:	4909      	ldr	r1, [pc, #36]	@ (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b94:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e049      	b.n	8001c5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fd92 	bl	8000708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f000 fa9e 	bl	8002138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d001      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e04f      	b.n	8001d20 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a23      	ldr	r2, [pc, #140]	@ (8001d2c <HAL_TIM_Base_Start_IT+0xc4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01d      	beq.n	8001cde <HAL_TIM_Base_Start_IT+0x76>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001caa:	d018      	beq.n	8001cde <HAL_TIM_Base_Start_IT+0x76>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d30 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_TIM_Base_Start_IT+0x76>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1e      	ldr	r2, [pc, #120]	@ (8001d34 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00e      	beq.n	8001cde <HAL_TIM_Base_Start_IT+0x76>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d009      	beq.n	8001cde <HAL_TIM_Base_Start_IT+0x76>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1b      	ldr	r2, [pc, #108]	@ (8001d3c <HAL_TIM_Base_Start_IT+0xd4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d004      	beq.n	8001cde <HAL_TIM_Base_Start_IT+0x76>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a19      	ldr	r2, [pc, #100]	@ (8001d40 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d115      	bne.n	8001d0a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b06      	cmp	r3, #6
 8001cee:	d015      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0xb4>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf6:	d011      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d08:	e008      	b.n	8001d1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	e000      	b.n	8001d1e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	40012c00 	.word	0x40012c00
 8001d30:	40000400 	.word	0x40000400
 8001d34:	40000800 	.word	0x40000800
 8001d38:	40000c00 	.word	0x40000c00
 8001d3c:	40013400 	.word	0x40013400
 8001d40:	40014000 	.word	0x40014000
 8001d44:	00010007 	.word	0x00010007

08001d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d020      	beq.n	8001dac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01b      	beq.n	8001dac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0202 	mvn.w	r2, #2
 8001d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f9b2 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f9a4 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f9b5 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d020      	beq.n	8001df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01b      	beq.n	8001df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0204 	mvn.w	r2, #4
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f98c 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f97e 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f98f 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d020      	beq.n	8001e44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d01b      	beq.n	8001e44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0208 	mvn.w	r2, #8
 8001e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2204      	movs	r2, #4
 8001e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f966 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f958 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f969 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d020      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d01b      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0210 	mvn.w	r2, #16
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2208      	movs	r2, #8
 8001e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f940 	bl	80020fc <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f932 	bl	80020e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f943 	bl	8002110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0201 	mvn.w	r2, #1
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fb58 	bl	8000564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00c      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fafd 	bl	80024dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00c      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 faf5 	bl	80024f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00c      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d007      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8fd 	bl	8002124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00c      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f06f 0220 	mvn.w	r2, #32
 8001f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fabd 	bl	80024c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_ConfigClockSource+0x1c>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e0b6      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x18a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f90:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fae:	d03e      	beq.n	800202e <HAL_TIM_ConfigClockSource+0xd8>
 8001fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fb4:	f200 8087 	bhi.w	80020c6 <HAL_TIM_ConfigClockSource+0x170>
 8001fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fbc:	f000 8086 	beq.w	80020cc <HAL_TIM_ConfigClockSource+0x176>
 8001fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fc4:	d87f      	bhi.n	80020c6 <HAL_TIM_ConfigClockSource+0x170>
 8001fc6:	2b70      	cmp	r3, #112	@ 0x70
 8001fc8:	d01a      	beq.n	8002000 <HAL_TIM_ConfigClockSource+0xaa>
 8001fca:	2b70      	cmp	r3, #112	@ 0x70
 8001fcc:	d87b      	bhi.n	80020c6 <HAL_TIM_ConfigClockSource+0x170>
 8001fce:	2b60      	cmp	r3, #96	@ 0x60
 8001fd0:	d050      	beq.n	8002074 <HAL_TIM_ConfigClockSource+0x11e>
 8001fd2:	2b60      	cmp	r3, #96	@ 0x60
 8001fd4:	d877      	bhi.n	80020c6 <HAL_TIM_ConfigClockSource+0x170>
 8001fd6:	2b50      	cmp	r3, #80	@ 0x50
 8001fd8:	d03c      	beq.n	8002054 <HAL_TIM_ConfigClockSource+0xfe>
 8001fda:	2b50      	cmp	r3, #80	@ 0x50
 8001fdc:	d873      	bhi.n	80020c6 <HAL_TIM_ConfigClockSource+0x170>
 8001fde:	2b40      	cmp	r3, #64	@ 0x40
 8001fe0:	d058      	beq.n	8002094 <HAL_TIM_ConfigClockSource+0x13e>
 8001fe2:	2b40      	cmp	r3, #64	@ 0x40
 8001fe4:	d86f      	bhi.n	80020c6 <HAL_TIM_ConfigClockSource+0x170>
 8001fe6:	2b30      	cmp	r3, #48	@ 0x30
 8001fe8:	d064      	beq.n	80020b4 <HAL_TIM_ConfigClockSource+0x15e>
 8001fea:	2b30      	cmp	r3, #48	@ 0x30
 8001fec:	d86b      	bhi.n	80020c6 <HAL_TIM_ConfigClockSource+0x170>
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d060      	beq.n	80020b4 <HAL_TIM_ConfigClockSource+0x15e>
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d867      	bhi.n	80020c6 <HAL_TIM_ConfigClockSource+0x170>
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d05c      	beq.n	80020b4 <HAL_TIM_ConfigClockSource+0x15e>
 8001ffa:	2b10      	cmp	r3, #16
 8001ffc:	d05a      	beq.n	80020b4 <HAL_TIM_ConfigClockSource+0x15e>
 8001ffe:	e062      	b.n	80020c6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002010:	f000 f9b2 	bl	8002378 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002022:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	609a      	str	r2, [r3, #8]
      break;
 800202c:	e04f      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800203e:	f000 f99b 	bl	8002378 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002050:	609a      	str	r2, [r3, #8]
      break;
 8002052:	e03c      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002060:	461a      	mov	r2, r3
 8002062:	f000 f90f 	bl	8002284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2150      	movs	r1, #80	@ 0x50
 800206c:	4618      	mov	r0, r3
 800206e:	f000 f968 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 8002072:	e02c      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002080:	461a      	mov	r2, r3
 8002082:	f000 f92e 	bl	80022e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2160      	movs	r1, #96	@ 0x60
 800208c:	4618      	mov	r0, r3
 800208e:	f000 f958 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 8002092:	e01c      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a0:	461a      	mov	r2, r3
 80020a2:	f000 f8ef 	bl	8002284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2140      	movs	r1, #64	@ 0x40
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 f948 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 80020b2:	e00c      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f000 f93f 	bl	8002342 <TIM_ITRx_SetConfig>
      break;
 80020c4:	e003      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
      break;
 80020ca:	e000      	b.n	80020ce <HAL_TIM_ConfigClockSource+0x178>
      break;
 80020cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a46      	ldr	r2, [pc, #280]	@ (8002264 <TIM_Base_SetConfig+0x12c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002156:	d00f      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a43      	ldr	r2, [pc, #268]	@ (8002268 <TIM_Base_SetConfig+0x130>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00b      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a42      	ldr	r2, [pc, #264]	@ (800226c <TIM_Base_SetConfig+0x134>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d007      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a41      	ldr	r2, [pc, #260]	@ (8002270 <TIM_Base_SetConfig+0x138>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a40      	ldr	r2, [pc, #256]	@ (8002274 <TIM_Base_SetConfig+0x13c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d108      	bne.n	800218a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800217e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a35      	ldr	r2, [pc, #212]	@ (8002264 <TIM_Base_SetConfig+0x12c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01f      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002198:	d01b      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a32      	ldr	r2, [pc, #200]	@ (8002268 <TIM_Base_SetConfig+0x130>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d017      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a31      	ldr	r2, [pc, #196]	@ (800226c <TIM_Base_SetConfig+0x134>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a30      	ldr	r2, [pc, #192]	@ (8002270 <TIM_Base_SetConfig+0x138>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00f      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002274 <TIM_Base_SetConfig+0x13c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00b      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002278 <TIM_Base_SetConfig+0x140>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2d      	ldr	r2, [pc, #180]	@ (800227c <TIM_Base_SetConfig+0x144>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d003      	beq.n	80021d2 <TIM_Base_SetConfig+0x9a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002280 <TIM_Base_SetConfig+0x148>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d108      	bne.n	80021e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a16      	ldr	r2, [pc, #88]	@ (8002264 <TIM_Base_SetConfig+0x12c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00f      	beq.n	8002230 <TIM_Base_SetConfig+0xf8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a18      	ldr	r2, [pc, #96]	@ (8002274 <TIM_Base_SetConfig+0x13c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00b      	beq.n	8002230 <TIM_Base_SetConfig+0xf8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a17      	ldr	r2, [pc, #92]	@ (8002278 <TIM_Base_SetConfig+0x140>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d007      	beq.n	8002230 <TIM_Base_SetConfig+0xf8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a16      	ldr	r2, [pc, #88]	@ (800227c <TIM_Base_SetConfig+0x144>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <TIM_Base_SetConfig+0xf8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a15      	ldr	r2, [pc, #84]	@ (8002280 <TIM_Base_SetConfig+0x148>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d103      	bne.n	8002238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f023 0201 	bic.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]
  }
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800
 8002270:	40000c00 	.word	0x40000c00
 8002274:	40013400 	.word	0x40013400
 8002278:	40014000 	.word	0x40014000
 800227c:	40014400 	.word	0x40014400
 8002280:	40014800 	.word	0x40014800

08002284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	f023 0201 	bic.w	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f023 030a 	bic.w	r3, r3, #10
 80022c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	621a      	str	r2, [r3, #32]
}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b087      	sub	sp, #28
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f023 0210 	bic.w	r2, r3, #16
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800230c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	031b      	lsls	r3, r3, #12
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800231e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	621a      	str	r2, [r3, #32]
}
 8002336:	bf00      	nop
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	f043 0307 	orr.w	r3, r3, #7
 8002364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	609a      	str	r2, [r3, #8]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	021a      	lsls	r2, r3, #8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	431a      	orrs	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	609a      	str	r2, [r3, #8]
}
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e068      	b.n	80024a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2e      	ldr	r2, [pc, #184]	@ (80024b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d004      	beq.n	8002404 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a2d      	ldr	r2, [pc, #180]	@ (80024b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d108      	bne.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800240a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800241c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1e      	ldr	r2, [pc, #120]	@ (80024b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01d      	beq.n	8002476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002442:	d018      	beq.n	8002476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1b      	ldr	r2, [pc, #108]	@ (80024b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1a      	ldr	r2, [pc, #104]	@ (80024bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00e      	beq.n	8002476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a18      	ldr	r2, [pc, #96]	@ (80024c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d009      	beq.n	8002476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a13      	ldr	r2, [pc, #76]	@ (80024b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d004      	beq.n	8002476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a14      	ldr	r2, [pc, #80]	@ (80024c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10c      	bne.n	8002490 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800247c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	4313      	orrs	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40013400 	.word	0x40013400
 80024b8:	40000400 	.word	0x40000400
 80024bc:	40000800 	.word	0x40000800
 80024c0:	40000c00 	.word	0x40000c00
 80024c4:	40014000 	.word	0x40014000

080024c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <__NVIC_SetPriority>:
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	2b00      	cmp	r3, #0
 8002516:	db0a      	blt.n	800252e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	490c      	ldr	r1, [pc, #48]	@ (8002550 <__NVIC_SetPriority+0x4c>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	0112      	lsls	r2, r2, #4
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	440b      	add	r3, r1
 8002528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800252c:	e00a      	b.n	8002544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4908      	ldr	r1, [pc, #32]	@ (8002554 <__NVIC_SetPriority+0x50>)
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	3b04      	subs	r3, #4
 800253c:	0112      	lsls	r2, r2, #4
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	440b      	add	r3, r1
 8002542:	761a      	strb	r2, [r3, #24]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000e100 	.word	0xe000e100
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800255c:	2100      	movs	r1, #0
 800255e:	f06f 0004 	mvn.w	r0, #4
 8002562:	f7ff ffcf 	bl	8002504 <__NVIC_SetPriority>
#endif
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002572:	f3ef 8305 	mrs	r3, IPSR
 8002576:	603b      	str	r3, [r7, #0]
  return(result);
 8002578:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800257e:	f06f 0305 	mvn.w	r3, #5
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	e00c      	b.n	80025a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <osKernelInitialize+0x44>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800258e:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <osKernelInitialize+0x44>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002594:	2300      	movs	r3, #0
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	e002      	b.n	80025a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80025a0:	687b      	ldr	r3, [r7, #4]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	200000a0 	.word	0x200000a0

080025b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ba:	f3ef 8305 	mrs	r3, IPSR
 80025be:	603b      	str	r3, [r7, #0]
  return(result);
 80025c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80025c6:	f06f 0305 	mvn.w	r3, #5
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	e010      	b.n	80025f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80025ce:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <osKernelStart+0x48>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d109      	bne.n	80025ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80025d6:	f7ff ffbf 	bl	8002558 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80025da:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <osKernelStart+0x48>)
 80025dc:	2202      	movs	r2, #2
 80025de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80025e0:	f002 f86a 	bl	80046b8 <vTaskStartScheduler>
      stat = osOK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	e002      	b.n	80025f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80025f0:	687b      	ldr	r3, [r7, #4]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200000a0 	.word	0x200000a0

08002600 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002606:	f3ef 8305 	mrs	r3, IPSR
 800260a:	603b      	str	r3, [r7, #0]
  return(result);
 800260c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8002612:	f002 f975 	bl	8004900 <xTaskGetTickCountFromISR>
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	e002      	b.n	8002620 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800261a:	f002 f961 	bl	80048e0 <xTaskGetTickCount>
 800261e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800262a:	b580      	push	{r7, lr}
 800262c:	b08e      	sub	sp, #56	@ 0x38
 800262e:	af04      	add	r7, sp, #16
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800263a:	f3ef 8305 	mrs	r3, IPSR
 800263e:	617b      	str	r3, [r7, #20]
  return(result);
 8002640:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002642:	2b00      	cmp	r3, #0
 8002644:	d17e      	bne.n	8002744 <osThreadNew+0x11a>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d07b      	beq.n	8002744 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002650:	2318      	movs	r3, #24
 8002652:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
 800265c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d045      	beq.n	80026f0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <osThreadNew+0x48>
        name = attr->name;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <osThreadNew+0x6e>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	2b38      	cmp	r3, #56	@ 0x38
 800268a:	d805      	bhi.n	8002698 <osThreadNew+0x6e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <osThreadNew+0x72>
        return (NULL);
 8002698:	2300      	movs	r3, #0
 800269a:	e054      	b.n	8002746 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00e      	beq.n	80026d2 <osThreadNew+0xa8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b5b      	cmp	r3, #91	@ 0x5b
 80026ba:	d90a      	bls.n	80026d2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d006      	beq.n	80026d2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <osThreadNew+0xa8>
        mem = 1;
 80026cc:	2301      	movs	r3, #1
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	e010      	b.n	80026f4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <osThreadNew+0xca>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d108      	bne.n	80026f4 <osThreadNew+0xca>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d104      	bne.n	80026f4 <osThreadNew+0xca>
          mem = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	e001      	b.n	80026f4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d110      	bne.n	800271c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002702:	9202      	str	r2, [sp, #8]
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	6a3a      	ldr	r2, [r7, #32]
 800270e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f001 fdf5 	bl	8004300 <xTaskCreateStatic>
 8002716:	4603      	mov	r3, r0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	e013      	b.n	8002744 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d110      	bne.n	8002744 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	b29a      	uxth	r2, r3
 8002726:	f107 0310 	add.w	r3, r7, #16
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f001 fe43 	bl	80043c0 <xTaskCreate>
 800273a:	4603      	mov	r3, r0
 800273c:	2b01      	cmp	r3, #1
 800273e:	d001      	beq.n	8002744 <osThreadNew+0x11a>
            hTask = NULL;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002744:	693b      	ldr	r3, [r7, #16]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3728      	adds	r7, #40	@ 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002756:	f3ef 8305 	mrs	r3, IPSR
 800275a:	60bb      	str	r3, [r7, #8]
  return(result);
 800275c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <osDelay+0x1c>
    stat = osErrorISR;
 8002762:	f06f 0305 	mvn.w	r3, #5
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e007      	b.n	800277a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <osDelay+0x2c>
      vTaskDelay(ticks);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f001 ff69 	bl	800464c <vTaskDelay>
    }
  }

  return (stat);
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f003 f9dd 	bl	8005b4c <pvTimerGetTimerID>
 8002792:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <TimerCallback+0x22>
    callb->func (callb->arg);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	6852      	ldr	r2, [r2, #4]
 80027a2:	4610      	mov	r0, r2
 80027a4:	4798      	blx	r3
  }
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	@ 0x30
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	460b      	mov	r3, r1
 80027be:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027c4:	f3ef 8305 	mrs	r3, IPSR
 80027c8:	613b      	str	r3, [r7, #16]
  return(result);
 80027ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d163      	bne.n	8002898 <osTimerNew+0xe8>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d060      	beq.n	8002898 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80027d6:	2008      	movs	r0, #8
 80027d8:	f003 fc30 	bl	800603c <pvPortMalloc>
 80027dc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d059      	beq.n	8002898 <osTimerNew+0xe8>
      callb->func = func;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80027f0:	7afb      	ldrb	r3, [r7, #11]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <osTimerNew+0x4c>
        reload = pdFALSE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	e001      	b.n	8002800 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80027fc:	2301      	movs	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8002800:	f04f 33ff 	mov.w	r3, #4294967295
 8002804:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8002806:	2300      	movs	r3, #0
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01c      	beq.n	800284a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <osTimerNew+0x6e>
          name = attr->name;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <osTimerNew+0x84>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b2b      	cmp	r3, #43	@ 0x2b
 800282c:	d902      	bls.n	8002834 <osTimerNew+0x84>
          mem = 1;
 800282e:	2301      	movs	r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	e00c      	b.n	800284e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d108      	bne.n	800284e <osTimerNew+0x9e>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d104      	bne.n	800284e <osTimerNew+0x9e>
            mem = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
 8002848:	e001      	b.n	800284e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10c      	bne.n	800286e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <osTimerNew+0xf4>)
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	2101      	movs	r1, #1
 8002864:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002866:	f002 fde4 	bl	8005432 <xTimerCreateStatic>
 800286a:	6238      	str	r0, [r7, #32]
 800286c:	e00b      	b.n	8002886 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d108      	bne.n	8002886 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002874:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <osTimerNew+0xf4>)
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	2101      	movs	r1, #1
 800287e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002880:	f002 fdb6 	bl	80053f0 <xTimerCreate>
 8002884:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <osTimerNew+0xe8>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <osTimerNew+0xe8>
        vPortFree (callb);
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f003 fca0 	bl	80061d8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002898:	6a3b      	ldr	r3, [r7, #32]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3728      	adds	r7, #40	@ 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	08002785 	.word	0x08002785

080028a8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028b4:	f3ef 8305 	mrs	r3, IPSR
 80028b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80028ba:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d174      	bne.n	80029aa <osMutexNew+0x102>
    if (attr != NULL) {
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <osMutexNew+0x26>
      type = attr->attr_bits;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	e001      	b.n	80028d2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <osMutexNew+0x3a>
      rmtx = 1U;
 80028dc:	2301      	movs	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	e001      	b.n	80028e6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d15c      	bne.n	80029aa <osMutexNew+0x102>
      mem = -1;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295
 80028f4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d006      	beq.n	8002912 <osMutexNew+0x6a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b4f      	cmp	r3, #79	@ 0x4f
 800290a:	d902      	bls.n	8002912 <osMutexNew+0x6a>
          mem = 1;
 800290c:	2301      	movs	r3, #1
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	e00c      	b.n	800292c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d108      	bne.n	800292c <osMutexNew+0x84>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <osMutexNew+0x84>
            mem = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	e001      	b.n	800292c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d112      	bne.n	8002958 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4619      	mov	r1, r3
 800293e:	2004      	movs	r0, #4
 8002940:	f000 fd71 	bl	8003426 <xQueueCreateMutexStatic>
 8002944:	61f8      	str	r0, [r7, #28]
 8002946:	e016      	b.n	8002976 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4619      	mov	r1, r3
 800294e:	2001      	movs	r0, #1
 8002950:	f000 fd69 	bl	8003426 <xQueueCreateMutexStatic>
 8002954:	61f8      	str	r0, [r7, #28]
 8002956:	e00e      	b.n	8002976 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10b      	bne.n	8002976 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002964:	2004      	movs	r0, #4
 8002966:	f000 fd46 	bl	80033f6 <xQueueCreateMutex>
 800296a:	61f8      	str	r0, [r7, #28]
 800296c:	e003      	b.n	8002976 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800296e:	2001      	movs	r0, #1
 8002970:	f000 fd41 	bl	80033f6 <xQueueCreateMutex>
 8002974:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00c      	beq.n	8002996 <osMutexNew+0xee>
        if (attr != NULL) {
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <osMutexNew+0xe2>
          name = attr->name;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	e001      	b.n	800298e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800298e:	68f9      	ldr	r1, [r7, #12]
 8002990:	69f8      	ldr	r0, [r7, #28]
 8002992:	f001 fc2d 	bl	80041f0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <osMutexNew+0x102>
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80029aa:	69fb      	ldr	r3, [r7, #28]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029d2:	f3ef 8305 	mrs	r3, IPSR
 80029d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80029d8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80029de:	f06f 0305 	mvn.w	r3, #5
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e02c      	b.n	8002a40 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80029ec:	f06f 0303 	mvn.w	r3, #3
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e025      	b.n	8002a40 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d011      	beq.n	8002a1e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80029fa:	6839      	ldr	r1, [r7, #0]
 80029fc:	6938      	ldr	r0, [r7, #16]
 80029fe:	f000 fd62 	bl	80034c6 <xQueueTakeMutexRecursive>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d01b      	beq.n	8002a40 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002a0e:	f06f 0301 	mvn.w	r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	e014      	b.n	8002a40 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002a16:	f06f 0302 	mvn.w	r3, #2
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e010      	b.n	8002a40 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002a1e:	6839      	ldr	r1, [r7, #0]
 8002a20:	6938      	ldr	r0, [r7, #16]
 8002a22:	f001 f907 	bl	8003c34 <xQueueSemaphoreTake>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d009      	beq.n	8002a40 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002a32:	f06f 0301 	mvn.w	r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	e002      	b.n	8002a40 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002a3a:	f06f 0302 	mvn.w	r3, #2
 8002a3e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8002a40:	697b      	ldr	r3, [r7, #20]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a66:	f3ef 8305 	mrs	r3, IPSR
 8002a6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a6c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <osMutexRelease+0x30>
    stat = osErrorISR;
 8002a72:	f06f 0305 	mvn.w	r3, #5
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	e01f      	b.n	8002aba <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d103      	bne.n	8002a88 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8002a80:	f06f 0303 	mvn.w	r3, #3
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e018      	b.n	8002aba <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002a8e:	6938      	ldr	r0, [r7, #16]
 8002a90:	f000 fce4 	bl	800345c <xQueueGiveMutexRecursive>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d00f      	beq.n	8002aba <osMutexRelease+0x70>
        stat = osErrorResource;
 8002a9a:	f06f 0302 	mvn.w	r3, #2
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	e00b      	b.n	8002aba <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	6938      	ldr	r0, [r7, #16]
 8002aaa:	f000 fdb1 	bl	8003610 <xQueueGenericSend>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d002      	beq.n	8002aba <osMutexRelease+0x70>
        stat = osErrorResource;
 8002ab4:	f06f 0302 	mvn.w	r3, #2
 8002ab8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002aba:	697b      	ldr	r3, [r7, #20]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	@ 0x28
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ad4:	f3ef 8305 	mrs	r3, IPSR
 8002ad8:	613b      	str	r3, [r7, #16]
  return(result);
 8002ada:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d175      	bne.n	8002bcc <osSemaphoreNew+0x108>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d072      	beq.n	8002bcc <osSemaphoreNew+0x108>
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d86e      	bhi.n	8002bcc <osSemaphoreNew+0x108>
    mem = -1;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
 8002af2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <osSemaphoreNew+0x4c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b4f      	cmp	r3, #79	@ 0x4f
 8002b08:	d902      	bls.n	8002b10 <osSemaphoreNew+0x4c>
        mem = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	e00c      	b.n	8002b2a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d108      	bne.n	8002b2a <osSemaphoreNew+0x66>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d104      	bne.n	8002b2a <osSemaphoreNew+0x66>
          mem = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e001      	b.n	8002b2a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d04c      	beq.n	8002bcc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d128      	bne.n	8002b8a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d10a      	bne.n	8002b54 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2203      	movs	r2, #3
 8002b44:	9200      	str	r2, [sp, #0]
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f000 fb5e 	bl	800320c <xQueueGenericCreateStatic>
 8002b50:	61f8      	str	r0, [r7, #28]
 8002b52:	e005      	b.n	8002b60 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002b54:	2203      	movs	r2, #3
 8002b56:	2100      	movs	r1, #0
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f000 fbd4 	bl	8003306 <xQueueGenericCreate>
 8002b5e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d022      	beq.n	8002bac <osSemaphoreNew+0xe8>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01f      	beq.n	8002bac <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	69f8      	ldr	r0, [r7, #28]
 8002b74:	f000 fd4c 	bl	8003610 <xQueueGenericSend>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d016      	beq.n	8002bac <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002b7e:	69f8      	ldr	r0, [r7, #28]
 8002b80:	f001 f9ea 	bl	8003f58 <vQueueDelete>
            hSemaphore = NULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	e010      	b.n	8002bac <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d108      	bne.n	8002ba2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	461a      	mov	r2, r3
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fccb 	bl	8003534 <xQueueCreateCountingSemaphoreStatic>
 8002b9e:	61f8      	str	r0, [r7, #28]
 8002ba0:	e004      	b.n	8002bac <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fcfe 	bl	80035a6 <xQueueCreateCountingSemaphore>
 8002baa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <osSemaphoreNew+0xfc>
          name = attr->name;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e001      	b.n	8002bc4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002bc4:	6979      	ldr	r1, [r7, #20]
 8002bc6:	69f8      	ldr	r0, [r7, #28]
 8002bc8:	f001 fb12 	bl	80041f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002bcc:	69fb      	ldr	r3, [r7, #28]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d103      	bne.n	8002bf8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002bf0:	f06f 0303 	mvn.w	r3, #3
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e039      	b.n	8002c6c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bf8:	f3ef 8305 	mrs	r3, IPSR
 8002bfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d022      	beq.n	8002c4a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002c0a:	f06f 0303 	mvn.w	r3, #3
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	e02c      	b.n	8002c6c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002c16:	f107 0308 	add.w	r3, r7, #8
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	6938      	ldr	r0, [r7, #16]
 8002c20:	f001 f918 	bl	8003e54 <xQueueReceiveFromISR>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d003      	beq.n	8002c32 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002c2a:	f06f 0302 	mvn.w	r3, #2
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	e01c      	b.n	8002c6c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d019      	beq.n	8002c6c <osSemaphoreAcquire+0x94>
 8002c38:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <osSemaphoreAcquire+0xa0>)
 8002c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	e010      	b.n	8002c6c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002c4a:	6839      	ldr	r1, [r7, #0]
 8002c4c:	6938      	ldr	r0, [r7, #16]
 8002c4e:	f000 fff1 	bl	8003c34 <xQueueSemaphoreTake>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d009      	beq.n	8002c6c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002c5e:	f06f 0301 	mvn.w	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e002      	b.n	8002c6c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002c66:	f06f 0302 	mvn.w	r3, #2
 8002c6a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002c6c:	697b      	ldr	r3, [r7, #20]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	e000ed04 	.word	0xe000ed04

08002c7c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d103      	bne.n	8002c9a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002c92:	f06f 0303 	mvn.w	r3, #3
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	e02c      	b.n	8002cf4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c9a:	f3ef 8305 	mrs	r3, IPSR
 8002c9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01a      	beq.n	8002cdc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002caa:	f107 0308 	add.w	r3, r7, #8
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6938      	ldr	r0, [r7, #16]
 8002cb2:	f000 fe4d 	bl	8003950 <xQueueGiveFromISR>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d003      	beq.n	8002cc4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002cbc:	f06f 0302 	mvn.w	r3, #2
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e017      	b.n	8002cf4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d014      	beq.n	8002cf4 <osSemaphoreRelease+0x78>
 8002cca:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <osSemaphoreRelease+0x84>)
 8002ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	e00b      	b.n	8002cf4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002cdc:	2300      	movs	r3, #0
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	6938      	ldr	r0, [r7, #16]
 8002ce4:	f000 fc94 	bl	8003610 <xQueueGenericSend>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d002      	beq.n	8002cf4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002cee:	f06f 0302 	mvn.w	r3, #2
 8002cf2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002cf4:	697b      	ldr	r3, [r7, #20]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000ed04 	.word	0xe000ed04

08002d04 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	@ 0x28
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d14:	f3ef 8305 	mrs	r3, IPSR
 8002d18:	613b      	str	r3, [r7, #16]
  return(result);
 8002d1a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d15f      	bne.n	8002de0 <osMessageQueueNew+0xdc>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d05c      	beq.n	8002de0 <osMessageQueueNew+0xdc>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d059      	beq.n	8002de0 <osMessageQueueNew+0xdc>
    mem = -1;
 8002d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d029      	beq.n	8002d8c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d012      	beq.n	8002d66 <osMessageQueueNew+0x62>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b4f      	cmp	r3, #79	@ 0x4f
 8002d46:	d90e      	bls.n	8002d66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d302      	bcc.n	8002d66 <osMessageQueueNew+0x62>
        mem = 1;
 8002d60:	2301      	movs	r3, #1
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	e014      	b.n	8002d90 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d110      	bne.n	8002d90 <osMessageQueueNew+0x8c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10c      	bne.n	8002d90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d108      	bne.n	8002d90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d104      	bne.n	8002d90 <osMessageQueueNew+0x8c>
          mem = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	e001      	b.n	8002d90 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d10b      	bne.n	8002dae <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2100      	movs	r1, #0
 8002da0:	9100      	str	r1, [sp, #0]
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fa31 	bl	800320c <xQueueGenericCreateStatic>
 8002daa:	61f8      	str	r0, [r7, #28]
 8002dac:	e008      	b.n	8002dc0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002db4:	2200      	movs	r2, #0
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 faa4 	bl	8003306 <xQueueGenericCreate>
 8002dbe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00c      	beq.n	8002de0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e001      	b.n	8002dd8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002dd8:	6979      	ldr	r1, [r7, #20]
 8002dda:	69f8      	ldr	r0, [r7, #28]
 8002ddc:	f001 fa08 	bl	80041f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002de0:	69fb      	ldr	r3, [r7, #28]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e04:	f3ef 8305 	mrs	r3, IPSR
 8002e08:	617b      	str	r3, [r7, #20]
  return(result);
 8002e0a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d028      	beq.n	8002e62 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <osMessageQueuePut+0x36>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <osMessageQueuePut+0x36>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002e22:	f06f 0303 	mvn.w	r3, #3
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	e038      	b.n	8002e9c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002e2e:	f107 0210 	add.w	r2, r7, #16
 8002e32:	2300      	movs	r3, #0
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	69b8      	ldr	r0, [r7, #24]
 8002e38:	f000 fcec 	bl	8003814 <xQueueGenericSendFromISR>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d003      	beq.n	8002e4a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002e42:	f06f 0302 	mvn.w	r3, #2
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	e028      	b.n	8002e9c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d025      	beq.n	8002e9c <osMessageQueuePut+0xb0>
 8002e50:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <osMessageQueuePut+0xbc>)
 8002e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	e01c      	b.n	8002e9c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <osMessageQueuePut+0x82>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002e6e:	f06f 0303 	mvn.w	r3, #3
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	e012      	b.n	8002e9c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002e76:	2300      	movs	r3, #0
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	69b8      	ldr	r0, [r7, #24]
 8002e7e:	f000 fbc7 	bl	8003610 <xQueueGenericSend>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d009      	beq.n	8002e9c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002e8e:	f06f 0301 	mvn.w	r3, #1
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	e002      	b.n	8002e9c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002e96:	f06f 0302 	mvn.w	r3, #2
 8002e9a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	e000ed04 	.word	0xe000ed04

08002eac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ec2:	f3ef 8305 	mrs	r3, IPSR
 8002ec6:	617b      	str	r3, [r7, #20]
  return(result);
 8002ec8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d028      	beq.n	8002f20 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <osMessageQueueGet+0x34>
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <osMessageQueueGet+0x34>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002ee0:	f06f 0303 	mvn.w	r3, #3
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	e037      	b.n	8002f58 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002eec:	f107 0310 	add.w	r3, r7, #16
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	69b8      	ldr	r0, [r7, #24]
 8002ef6:	f000 ffad 	bl	8003e54 <xQueueReceiveFromISR>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d003      	beq.n	8002f08 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002f00:	f06f 0302 	mvn.w	r3, #2
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e027      	b.n	8002f58 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d024      	beq.n	8002f58 <osMessageQueueGet+0xac>
 8002f0e:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <osMessageQueueGet+0xb8>)
 8002f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	e01b      	b.n	8002f58 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <osMessageQueueGet+0x80>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d103      	bne.n	8002f34 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002f2c:	f06f 0303 	mvn.w	r3, #3
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	e011      	b.n	8002f58 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	69b8      	ldr	r0, [r7, #24]
 8002f3a:	f000 fd99 	bl	8003a70 <xQueueReceive>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d009      	beq.n	8002f58 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002f4a:	f06f 0301 	mvn.w	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	e002      	b.n	8002f58 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002f52:	f06f 0302 	mvn.w	r3, #2
 8002f56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002f58:	69fb      	ldr	r3, [r7, #28]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4a07      	ldr	r2, [pc, #28]	@ (8002f94 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4a06      	ldr	r2, [pc, #24]	@ (8002f98 <vApplicationGetIdleTaskMemory+0x30>)
 8002f7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2280      	movs	r2, #128	@ 0x80
 8002f84:	601a      	str	r2, [r3, #0]
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	200000a4 	.word	0x200000a4
 8002f98:	20000100 	.word	0x20000100

08002f9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4a07      	ldr	r2, [pc, #28]	@ (8002fc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002fac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	4a06      	ldr	r2, [pc, #24]	@ (8002fcc <vApplicationGetTimerTaskMemory+0x30>)
 8002fb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fba:	601a      	str	r2, [r3, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	20000300 	.word	0x20000300
 8002fcc:	2000035c 	.word	0x2000035c

08002fd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f103 0208 	add.w	r2, r3, #8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f103 0208 	add.w	r2, r3, #8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f103 0208 	add.w	r2, r3, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800302a:	b480      	push	{r7}
 800302c:	b085      	sub	sp, #20
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d103      	bne.n	8003092 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e00c      	b.n	80030ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3308      	adds	r3, #8
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e002      	b.n	80030a0 <vListInsert+0x2e>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d2f6      	bcs.n	800309a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6892      	ldr	r2, [r2, #8]
 80030fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6852      	ldr	r2, [r2, #4]
 8003104:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	d103      	bne.n	8003118 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	1e5a      	subs	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800315e:	bf00      	nop
 8003160:	bf00      	nop
 8003162:	e7fd      	b.n	8003160 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003164:	f002 fe48 	bl	8005df8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003170:	68f9      	ldr	r1, [r7, #12]
 8003172:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	441a      	add	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003194:	3b01      	subs	r3, #1
 8003196:	68f9      	ldr	r1, [r7, #12]
 8003198:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	441a      	add	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	22ff      	movs	r2, #255	@ 0xff
 80031a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	22ff      	movs	r2, #255	@ 0xff
 80031b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d114      	bne.n	80031e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01a      	beq.n	80031f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3310      	adds	r3, #16
 80031c6:	4618      	mov	r0, r3
 80031c8:	f001 fd16 	bl	8004bf8 <xTaskRemoveFromEventList>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d012      	beq.n	80031f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003208 <xQueueGenericReset+0xd0>)
 80031d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	e009      	b.n	80031f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3310      	adds	r3, #16
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fef1 	bl	8002fd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3324      	adds	r3, #36	@ 0x24
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff feec 	bl	8002fd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031f8:	f002 fe30 	bl	8005e5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031fc:	2301      	movs	r3, #1
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08e      	sub	sp, #56	@ 0x38
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10b      	bne.n	8003238 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003232:	bf00      	nop
 8003234:	bf00      	nop
 8003236:	e7fd      	b.n	8003234 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10b      	bne.n	8003256 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	e7fd      	b.n	8003252 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <xQueueGenericCreateStatic+0x56>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <xQueueGenericCreateStatic+0x5a>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <xQueueGenericCreateStatic+0x5c>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10b      	bne.n	8003284 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	623b      	str	r3, [r7, #32]
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <xQueueGenericCreateStatic+0x84>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <xQueueGenericCreateStatic+0x88>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <xQueueGenericCreateStatic+0x8a>
 8003294:	2300      	movs	r3, #0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10b      	bne.n	80032b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	61fb      	str	r3, [r7, #28]
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	e7fd      	b.n	80032ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032b2:	2350      	movs	r3, #80	@ 0x50
 80032b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b50      	cmp	r3, #80	@ 0x50
 80032ba:	d00b      	beq.n	80032d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	61bb      	str	r3, [r7, #24]
}
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80032da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80032ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f840 	bl	800337c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80032fe:	4618      	mov	r0, r3
 8003300:	3730      	adds	r7, #48	@ 0x30
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003306:	b580      	push	{r7, lr}
 8003308:	b08a      	sub	sp, #40	@ 0x28
 800330a:	af02      	add	r7, sp, #8
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	4613      	mov	r3, r2
 8003312:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <xQueueGenericCreate+0x2c>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	613b      	str	r3, [r7, #16]
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	e7fd      	b.n	800332e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	fb02 f303 	mul.w	r3, r2, r3
 800333a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	3350      	adds	r3, #80	@ 0x50
 8003340:	4618      	mov	r0, r3
 8003342:	f002 fe7b 	bl	800603c <pvPortMalloc>
 8003346:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d011      	beq.n	8003372 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	3350      	adds	r3, #80	@ 0x50
 8003356:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003360:	79fa      	ldrb	r2, [r7, #7]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	4613      	mov	r3, r2
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f805 	bl	800337c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003372:	69bb      	ldr	r3, [r7, #24]
	}
 8003374:	4618      	mov	r0, r3
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d103      	bne.n	8003398 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e002      	b.n	800339e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033aa:	2101      	movs	r1, #1
 80033ac:	69b8      	ldr	r0, [r7, #24]
 80033ae:	f7ff fec3 	bl	8003138 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80033e2:	2300      	movs	r3, #0
 80033e4:	2200      	movs	r2, #0
 80033e6:	2100      	movs	r1, #0
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f911 	bl	8003610 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4603      	mov	r3, r0
 80033fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003400:	2301      	movs	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	461a      	mov	r2, r3
 800340c:	6939      	ldr	r1, [r7, #16]
 800340e:	6978      	ldr	r0, [r7, #20]
 8003410:	f7ff ff79 	bl	8003306 <xQueueGenericCreate>
 8003414:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7ff ffd3 	bl	80033c2 <prvInitialiseMutex>

		return xNewQueue;
 800341c:	68fb      	ldr	r3, [r7, #12]
	}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003426:	b580      	push	{r7, lr}
 8003428:	b088      	sub	sp, #32
 800342a:	af02      	add	r7, sp, #8
 800342c:	4603      	mov	r3, r0
 800342e:	6039      	str	r1, [r7, #0]
 8003430:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003432:	2301      	movs	r3, #1
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2200      	movs	r2, #0
 8003442:	6939      	ldr	r1, [r7, #16]
 8003444:	6978      	ldr	r0, [r7, #20]
 8003446:	f7ff fee1 	bl	800320c <xQueueGenericCreateStatic>
 800344a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f7ff ffb8 	bl	80033c2 <prvInitialiseMutex>

		return xNewQueue;
 8003452:	68fb      	ldr	r3, [r7, #12]
	}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10b      	bne.n	8003486 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800346e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	60fb      	str	r3, [r7, #12]
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	e7fd      	b.n	8003482 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	689c      	ldr	r4, [r3, #8]
 800348a:	f001 fd75 	bl	8004f78 <xTaskGetCurrentTaskHandle>
 800348e:	4603      	mov	r3, r0
 8003490:	429c      	cmp	r4, r3
 8003492:	d111      	bne.n	80034b8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	1e5a      	subs	r2, r3, #1
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80034a6:	2300      	movs	r3, #0
 80034a8:	2200      	movs	r2, #0
 80034aa:	2100      	movs	r1, #0
 80034ac:	6938      	ldr	r0, [r7, #16]
 80034ae:	f000 f8af 	bl	8003610 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80034b2:	2301      	movs	r3, #1
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e001      	b.n	80034bc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80034bc:	697b      	ldr	r3, [r7, #20]
	}
 80034be:	4618      	mov	r0, r3
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd90      	pop	{r4, r7, pc}

080034c6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80034c6:	b590      	push	{r4, r7, lr}
 80034c8:	b087      	sub	sp, #28
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	60fb      	str	r3, [r7, #12]
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	e7fd      	b.n	80034ee <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	689c      	ldr	r4, [r3, #8]
 80034f6:	f001 fd3f 	bl	8004f78 <xTaskGetCurrentTaskHandle>
 80034fa:	4603      	mov	r3, r0
 80034fc:	429c      	cmp	r4, r3
 80034fe:	d107      	bne.n	8003510 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800350a:	2301      	movs	r3, #1
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e00c      	b.n	800352a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003510:	6839      	ldr	r1, [r7, #0]
 8003512:	6938      	ldr	r0, [r7, #16]
 8003514:	f000 fb8e 	bl	8003c34 <xQueueSemaphoreTake>
 8003518:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800352a:	697b      	ldr	r3, [r7, #20]
	}
 800352c:	4618      	mov	r0, r3
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	bd90      	pop	{r4, r7, pc}

08003534 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	@ 0x28
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10b      	bne.n	800355e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	61bb      	str	r3, [r7, #24]
}
 8003558:	bf00      	nop
 800355a:	bf00      	nop
 800355c:	e7fd      	b.n	800355a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	429a      	cmp	r2, r3
 8003564:	d90b      	bls.n	800357e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	617b      	str	r3, [r7, #20]
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	e7fd      	b.n	800357a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800357e:	2302      	movs	r3, #2
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	2100      	movs	r1, #0
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7ff fe3f 	bl	800320c <xQueueGenericCreateStatic>
 800358e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800359c:	69fb      	ldr	r3, [r7, #28]
	}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	613b      	str	r3, [r7, #16]
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	e7fd      	b.n	80035ca <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d90b      	bls.n	80035ee <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	60fb      	str	r3, [r7, #12]
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	e7fd      	b.n	80035ea <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80035ee:	2202      	movs	r2, #2
 80035f0:	2100      	movs	r1, #0
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff fe87 	bl	8003306 <xQueueGenericCreate>
 80035f8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003606:	697b      	ldr	r3, [r7, #20]
	}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08e      	sub	sp, #56	@ 0x38
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800361e:	2300      	movs	r3, #0
 8003620:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <xQueueGenericSend+0x34>
	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <xQueueGenericSend+0x42>
 800364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <xQueueGenericSend+0x46>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <xQueueGenericSend+0x48>
 8003656:	2300      	movs	r3, #0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <xQueueGenericSend+0x64>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800366e:	bf00      	nop
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d103      	bne.n	8003682 <xQueueGenericSend+0x72>
 800367a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <xQueueGenericSend+0x76>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <xQueueGenericSend+0x78>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <xQueueGenericSend+0x94>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	623b      	str	r3, [r7, #32]
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036a4:	f001 fc78 	bl	8004f98 <xTaskGetSchedulerState>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <xQueueGenericSend+0xa4>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <xQueueGenericSend+0xa8>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <xQueueGenericSend+0xaa>
 80036b8:	2300      	movs	r3, #0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10b      	bne.n	80036d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	61fb      	str	r3, [r7, #28]
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	e7fd      	b.n	80036d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036d6:	f002 fb8f 	bl	8005df8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <xQueueGenericSend+0xdc>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d129      	bne.n	8003740 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036f2:	f000 fc6d 	bl	8003fd0 <prvCopyDataToQueue>
 80036f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003702:	3324      	adds	r3, #36	@ 0x24
 8003704:	4618      	mov	r0, r3
 8003706:	f001 fa77 	bl	8004bf8 <xTaskRemoveFromEventList>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d013      	beq.n	8003738 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003710:	4b3f      	ldr	r3, [pc, #252]	@ (8003810 <xQueueGenericSend+0x200>)
 8003712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	e00a      	b.n	8003738 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003728:	4b39      	ldr	r3, [pc, #228]	@ (8003810 <xQueueGenericSend+0x200>)
 800372a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003738:	f002 fb90 	bl	8005e5c <vPortExitCritical>
				return pdPASS;
 800373c:	2301      	movs	r3, #1
 800373e:	e063      	b.n	8003808 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003746:	f002 fb89 	bl	8005e5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800374a:	2300      	movs	r3, #0
 800374c:	e05c      	b.n	8003808 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800374e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4618      	mov	r0, r3
 800375a:	f001 fab1 	bl	8004cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800375e:	2301      	movs	r3, #1
 8003760:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003762:	f002 fb7b 	bl	8005e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003766:	f001 f80f 	bl	8004788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800376a:	f002 fb45 	bl	8005df8 <vPortEnterCritical>
 800376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003770:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003774:	b25b      	sxtb	r3, r3
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d103      	bne.n	8003784 <xQueueGenericSend+0x174>
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003786:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800378a:	b25b      	sxtb	r3, r3
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d103      	bne.n	800379a <xQueueGenericSend+0x18a>
 8003792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800379a:	f002 fb5f 	bl	8005e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800379e:	1d3a      	adds	r2, r7, #4
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 faa0 	bl	8004cec <xTaskCheckForTimeOut>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d124      	bne.n	80037fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037b4:	f000 fd04 	bl	80041c0 <prvIsQueueFull>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d018      	beq.n	80037f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c0:	3310      	adds	r3, #16
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f001 f9c4 	bl	8004b54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037ce:	f000 fc8f 	bl	80040f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037d2:	f000 ffe7 	bl	80047a4 <xTaskResumeAll>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f47f af7c 	bne.w	80036d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <xQueueGenericSend+0x200>)
 80037e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	e772      	b.n	80036d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037f2:	f000 fc7d 	bl	80040f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037f6:	f000 ffd5 	bl	80047a4 <xTaskResumeAll>
 80037fa:	e76c      	b.n	80036d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037fe:	f000 fc77 	bl	80040f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003802:	f000 ffcf 	bl	80047a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003806:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003808:	4618      	mov	r0, r3
 800380a:	3738      	adds	r7, #56	@ 0x38
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	e000ed04 	.word	0xe000ed04

08003814 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b090      	sub	sp, #64	@ 0x40
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800382c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	e7fd      	b.n	8003840 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <xQueueGenericSendFromISR+0x3e>
 800384a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <xQueueGenericSendFromISR+0x42>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <xQueueGenericSendFromISR+0x44>
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800386e:	bf00      	nop
 8003870:	bf00      	nop
 8003872:	e7fd      	b.n	8003870 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d103      	bne.n	8003882 <xQueueGenericSendFromISR+0x6e>
 800387a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <xQueueGenericSendFromISR+0x72>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <xQueueGenericSendFromISR+0x74>
 8003886:	2300      	movs	r3, #0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800388c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	623b      	str	r3, [r7, #32]
}
 800389e:	bf00      	nop
 80038a0:	bf00      	nop
 80038a2:	e7fd      	b.n	80038a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038a4:	f002 fb88 	bl	8005fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038a8:	f3ef 8211 	mrs	r2, BASEPRI
 80038ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	61fa      	str	r2, [r7, #28]
 80038be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d302      	bcc.n	80038d6 <xQueueGenericSendFromISR+0xc2>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d12f      	bne.n	8003936 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80038ec:	f000 fb70 	bl	8003fd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d112      	bne.n	8003920 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d016      	beq.n	8003930 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003904:	3324      	adds	r3, #36	@ 0x24
 8003906:	4618      	mov	r0, r3
 8003908:	f001 f976 	bl	8004bf8 <xTaskRemoveFromEventList>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00e      	beq.n	8003930 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e007      	b.n	8003930 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003920:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003924:	3301      	adds	r3, #1
 8003926:	b2db      	uxtb	r3, r3
 8003928:	b25a      	sxtb	r2, r3
 800392a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003930:	2301      	movs	r3, #1
 8003932:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003934:	e001      	b.n	800393a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003936:	2300      	movs	r3, #0
 8003938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800393a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003944:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003948:	4618      	mov	r0, r3
 800394a:	3740      	adds	r7, #64	@ 0x40
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08e      	sub	sp, #56	@ 0x38
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	623b      	str	r3, [r7, #32]
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00b      	beq.n	800399c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	61fb      	str	r3, [r7, #28]
}
 8003996:	bf00      	nop
 8003998:	bf00      	nop
 800399a:	e7fd      	b.n	8003998 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d103      	bne.n	80039ac <xQueueGiveFromISR+0x5c>
 80039a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <xQueueGiveFromISR+0x60>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <xQueueGiveFromISR+0x62>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10b      	bne.n	80039ce <xQueueGiveFromISR+0x7e>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	61bb      	str	r3, [r7, #24]
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	e7fd      	b.n	80039ca <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039ce:	f002 faf3 	bl	8005fb8 <vPortValidateInterruptPriority>
	__asm volatile
 80039d2:	f3ef 8211 	mrs	r2, BASEPRI
 80039d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	617a      	str	r2, [r7, #20]
 80039e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80039ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d22b      	bcs.n	8003a56 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d112      	bne.n	8003a40 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d016      	beq.n	8003a50 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a24:	3324      	adds	r3, #36	@ 0x24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 f8e6 	bl	8004bf8 <xTaskRemoveFromEventList>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00e      	beq.n	8003a50 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00b      	beq.n	8003a50 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e007      	b.n	8003a50 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a44:	3301      	adds	r3, #1
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	b25a      	sxtb	r2, r3
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003a50:	2301      	movs	r3, #1
 8003a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a54:	e001      	b.n	8003a5a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f383 8811 	msr	BASEPRI, r3
}
 8003a64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3738      	adds	r7, #56	@ 0x38
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08c      	sub	sp, #48	@ 0x30
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <xQueueReceive+0x32>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	623b      	str	r3, [r7, #32]
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	e7fd      	b.n	8003a9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <xQueueReceive+0x40>
 8003aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <xQueueReceive+0x44>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <xQueueReceive+0x46>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10b      	bne.n	8003ad2 <xQueueReceive+0x62>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	61fb      	str	r3, [r7, #28]
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	e7fd      	b.n	8003ace <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ad2:	f001 fa61 	bl	8004f98 <xTaskGetSchedulerState>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <xQueueReceive+0x72>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <xQueueReceive+0x76>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <xQueueReceive+0x78>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10b      	bne.n	8003b04 <xQueueReceive+0x94>
	__asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	61bb      	str	r3, [r7, #24]
}
 8003afe:	bf00      	nop
 8003b00:	bf00      	nop
 8003b02:	e7fd      	b.n	8003b00 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b04:	f002 f978 	bl	8005df8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01f      	beq.n	8003b54 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b18:	f000 fac4 	bl	80040a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	1e5a      	subs	r2, r3, #1
 8003b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00f      	beq.n	8003b4c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2e:	3310      	adds	r3, #16
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 f861 	bl	8004bf8 <xTaskRemoveFromEventList>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8003c30 <xQueueReceive+0x1c0>)
 8003b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b4c:	f002 f986 	bl	8005e5c <vPortExitCritical>
				return pdPASS;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e069      	b.n	8003c28 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b5a:	f002 f97f 	bl	8005e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e062      	b.n	8003c28 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d106      	bne.n	8003b76 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b68:	f107 0310 	add.w	r3, r7, #16
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f8a7 	bl	8004cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b72:	2301      	movs	r3, #1
 8003b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b76:	f002 f971 	bl	8005e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b7a:	f000 fe05 	bl	8004788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b7e:	f002 f93b 	bl	8005df8 <vPortEnterCritical>
 8003b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b88:	b25b      	sxtb	r3, r3
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d103      	bne.n	8003b98 <xQueueReceive+0x128>
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b9e:	b25b      	sxtb	r3, r3
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d103      	bne.n	8003bae <xQueueReceive+0x13e>
 8003ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bae:	f002 f955 	bl	8005e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bb2:	1d3a      	adds	r2, r7, #4
 8003bb4:	f107 0310 	add.w	r3, r7, #16
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f001 f896 	bl	8004cec <xTaskCheckForTimeOut>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d123      	bne.n	8003c0e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bc8:	f000 fae4 	bl	8004194 <prvIsQueueEmpty>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d017      	beq.n	8003c02 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd4:	3324      	adds	r3, #36	@ 0x24
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 ffba 	bl	8004b54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003be0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003be2:	f000 fa85 	bl	80040f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003be6:	f000 fddd 	bl	80047a4 <xTaskResumeAll>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d189      	bne.n	8003b04 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c30 <xQueueReceive+0x1c0>)
 8003bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	e780      	b.n	8003b04 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c04:	f000 fa74 	bl	80040f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c08:	f000 fdcc 	bl	80047a4 <xTaskResumeAll>
 8003c0c:	e77a      	b.n	8003b04 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c10:	f000 fa6e 	bl	80040f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c14:	f000 fdc6 	bl	80047a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c1a:	f000 fabb 	bl	8004194 <prvIsQueueEmpty>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f43f af6f 	beq.w	8003b04 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3730      	adds	r7, #48	@ 0x30
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	e000ed04 	.word	0xe000ed04

08003c34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08e      	sub	sp, #56	@ 0x38
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10b      	bne.n	8003c68 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	623b      	str	r3, [r7, #32]
}
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
 8003c66:	e7fd      	b.n	8003c64 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00b      	beq.n	8003c88 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	61fb      	str	r3, [r7, #28]
}
 8003c82:	bf00      	nop
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c88:	f001 f986 	bl	8004f98 <xTaskGetSchedulerState>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <xQueueSemaphoreTake+0x64>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <xQueueSemaphoreTake+0x68>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <xQueueSemaphoreTake+0x6a>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	61bb      	str	r3, [r7, #24]
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	e7fd      	b.n	8003cb6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cba:	f002 f89d 	bl	8005df8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d024      	beq.n	8003d14 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	1e5a      	subs	r2, r3, #1
 8003cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003cda:	f001 fad7 	bl	800528c <pvTaskIncrementMutexHeldCount>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00f      	beq.n	8003d0c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cee:	3310      	adds	r3, #16
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 ff81 	bl	8004bf8 <xTaskRemoveFromEventList>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cfc:	4b54      	ldr	r3, [pc, #336]	@ (8003e50 <xQueueSemaphoreTake+0x21c>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d0c:	f002 f8a6 	bl	8005e5c <vPortExitCritical>
				return pdPASS;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e098      	b.n	8003e46 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d112      	bne.n	8003d40 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	617b      	str	r3, [r7, #20]
}
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003d38:	f002 f890 	bl	8005e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e082      	b.n	8003e46 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d46:	f107 030c 	add.w	r3, r7, #12
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 ffb8 	bl	8004cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d54:	f002 f882 	bl	8005e5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d58:	f000 fd16 	bl	8004788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d5c:	f002 f84c 	bl	8005df8 <vPortEnterCritical>
 8003d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d66:	b25b      	sxtb	r3, r3
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d103      	bne.n	8003d76 <xQueueSemaphoreTake+0x142>
 8003d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d7c:	b25b      	sxtb	r3, r3
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d103      	bne.n	8003d8c <xQueueSemaphoreTake+0x158>
 8003d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d8c:	f002 f866 	bl	8005e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d90:	463a      	mov	r2, r7
 8003d92:	f107 030c 	add.w	r3, r7, #12
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 ffa7 	bl	8004cec <xTaskCheckForTimeOut>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d132      	bne.n	8003e0a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003da4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003da6:	f000 f9f5 	bl	8004194 <prvIsQueueEmpty>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d026      	beq.n	8003dfe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003db8:	f002 f81e 	bl	8005df8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 f907 	bl	8004fd4 <xTaskPriorityInherit>
 8003dc6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003dc8:	f002 f848 	bl	8005e5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dce:	3324      	adds	r3, #36	@ 0x24
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 febd 	bl	8004b54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ddc:	f000 f988 	bl	80040f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003de0:	f000 fce0 	bl	80047a4 <xTaskResumeAll>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f47f af67 	bne.w	8003cba <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003dec:	4b18      	ldr	r3, [pc, #96]	@ (8003e50 <xQueueSemaphoreTake+0x21c>)
 8003dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	e75d      	b.n	8003cba <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003dfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e00:	f000 f976 	bl	80040f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e04:	f000 fcce 	bl	80047a4 <xTaskResumeAll>
 8003e08:	e757      	b.n	8003cba <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003e0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e0c:	f000 f970 	bl	80040f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e10:	f000 fcc8 	bl	80047a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e16:	f000 f9bd 	bl	8004194 <prvIsQueueEmpty>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f43f af4c 	beq.w	8003cba <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00d      	beq.n	8003e44 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003e28:	f001 ffe6 	bl	8005df8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003e2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e2e:	f000 f8b7 	bl	8003fa0 <prvGetDisinheritPriorityAfterTimeout>
 8003e32:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 f9a2 	bl	8005184 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003e40:	f002 f80c 	bl	8005e5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3738      	adds	r7, #56	@ 0x38
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	e000ed04 	.word	0xe000ed04

08003e54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08e      	sub	sp, #56	@ 0x38
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	623b      	str	r3, [r7, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	e7fd      	b.n	8003e7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d103      	bne.n	8003e90 <xQueueReceiveFromISR+0x3c>
 8003e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <xQueueReceiveFromISR+0x40>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <xQueueReceiveFromISR+0x42>
 8003e94:	2300      	movs	r3, #0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10b      	bne.n	8003eb2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	61fb      	str	r3, [r7, #28]
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	e7fd      	b.n	8003eae <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003eb2:	f002 f881 	bl	8005fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8003eb6:	f3ef 8211 	mrs	r2, BASEPRI
 8003eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	61ba      	str	r2, [r7, #24]
 8003ecc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003ece:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d02f      	beq.n	8003f3e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ee4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003eec:	f000 f8da 	bl	80040a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef2:	1e5a      	subs	r2, r3, #1
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d112      	bne.n	8003f28 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d016      	beq.n	8003f38 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0c:	3310      	adds	r3, #16
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fe72 	bl	8004bf8 <xTaskRemoveFromEventList>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00e      	beq.n	8003f38 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00b      	beq.n	8003f38 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e007      	b.n	8003f38 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	b25a      	sxtb	r2, r3
 8003f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f3c:	e001      	b.n	8003f42 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f383 8811 	msr	BASEPRI, r3
}
 8003f4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3738      	adds	r7, #56	@ 0x38
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10b      	bne.n	8003f82 <vQueueDelete+0x2a>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	60bb      	str	r3, [r7, #8]
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	e7fd      	b.n	8003f7e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f95e 	bl	8004244 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d102      	bne.n	8003f98 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f002 f920 	bl	80061d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d006      	beq.n	8003fbe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e001      	b.n	8003fc2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
	}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10d      	bne.n	800400a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d14d      	bne.n	8004092 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 f852 	bl	80050a4 <xTaskPriorityDisinherit>
 8004000:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	e043      	b.n	8004092 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d119      	bne.n	8004044 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6858      	ldr	r0, [r3, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004018:	461a      	mov	r2, r3
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	f002 fa28 	bl	8006470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	441a      	add	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	429a      	cmp	r2, r3
 8004038:	d32b      	bcc.n	8004092 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	e026      	b.n	8004092 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68d8      	ldr	r0, [r3, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	461a      	mov	r2, r3
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	f002 fa0e 	bl	8006470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	425b      	negs	r3, r3
 800405e:	441a      	add	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d207      	bcs.n	8004080 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	425b      	negs	r3, r3
 800407a:	441a      	add	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d105      	bne.n	8004092 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	3b01      	subs	r3, #1
 8004090:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800409a:	697b      	ldr	r3, [r7, #20]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d018      	beq.n	80040e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	441a      	add	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d303      	bcc.n	80040d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68d9      	ldr	r1, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e0:	461a      	mov	r2, r3
 80040e2:	6838      	ldr	r0, [r7, #0]
 80040e4:	f002 f9c4 	bl	8006470 <memcpy>
	}
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040f8:	f001 fe7e 	bl	8005df8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004102:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004104:	e011      	b.n	800412a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	2b00      	cmp	r3, #0
 800410c:	d012      	beq.n	8004134 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3324      	adds	r3, #36	@ 0x24
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fd70 	bl	8004bf8 <xTaskRemoveFromEventList>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800411e:	f000 fe49 	bl	8004db4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	3b01      	subs	r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800412a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	dce9      	bgt.n	8004106 <prvUnlockQueue+0x16>
 8004132:	e000      	b.n	8004136 <prvUnlockQueue+0x46>
					break;
 8004134:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	22ff      	movs	r2, #255	@ 0xff
 800413a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800413e:	f001 fe8d 	bl	8005e5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004142:	f001 fe59 	bl	8005df8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800414c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800414e:	e011      	b.n	8004174 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d012      	beq.n	800417e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3310      	adds	r3, #16
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fd4b 	bl	8004bf8 <xTaskRemoveFromEventList>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004168:	f000 fe24 	bl	8004db4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800416c:	7bbb      	ldrb	r3, [r7, #14]
 800416e:	3b01      	subs	r3, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004178:	2b00      	cmp	r3, #0
 800417a:	dce9      	bgt.n	8004150 <prvUnlockQueue+0x60>
 800417c:	e000      	b.n	8004180 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800417e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	22ff      	movs	r2, #255	@ 0xff
 8004184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004188:	f001 fe68 	bl	8005e5c <vPortExitCritical>
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800419c:	f001 fe2c 	bl	8005df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e001      	b.n	80041b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041b2:	f001 fe53 	bl	8005e5c <vPortExitCritical>

	return xReturn;
 80041b6:	68fb      	ldr	r3, [r7, #12]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041c8:	f001 fe16 	bl	8005df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d102      	bne.n	80041de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041d8:	2301      	movs	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	e001      	b.n	80041e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041e2:	f001 fe3b 	bl	8005e5c <vPortExitCritical>

	return xReturn;
 80041e6:	68fb      	ldr	r3, [r7, #12]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	e014      	b.n	800422a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004200:	4a0f      	ldr	r2, [pc, #60]	@ (8004240 <vQueueAddToRegistry+0x50>)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800420c:	490c      	ldr	r1, [pc, #48]	@ (8004240 <vQueueAddToRegistry+0x50>)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004216:	4a0a      	ldr	r2, [pc, #40]	@ (8004240 <vQueueAddToRegistry+0x50>)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4413      	add	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004222:	e006      	b.n	8004232 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b07      	cmp	r3, #7
 800422e:	d9e7      	bls.n	8004200 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	2000075c 	.word	0x2000075c

08004244 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e016      	b.n	8004280 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004252:	4a10      	ldr	r2, [pc, #64]	@ (8004294 <vQueueUnregisterQueue+0x50>)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	429a      	cmp	r2, r3
 8004260:	d10b      	bne.n	800427a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004262:	4a0c      	ldr	r2, [pc, #48]	@ (8004294 <vQueueUnregisterQueue+0x50>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2100      	movs	r1, #0
 8004268:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800426c:	4a09      	ldr	r2, [pc, #36]	@ (8004294 <vQueueUnregisterQueue+0x50>)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4413      	add	r3, r2
 8004274:	2200      	movs	r2, #0
 8004276:	605a      	str	r2, [r3, #4]
				break;
 8004278:	e006      	b.n	8004288 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3301      	adds	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b07      	cmp	r3, #7
 8004284:	d9e5      	bls.n	8004252 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004286:	bf00      	nop
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	2000075c 	.word	0x2000075c

08004298 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042a8:	f001 fda6 	bl	8005df8 <vPortEnterCritical>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d103      	bne.n	80042c2 <vQueueWaitForMessageRestricted+0x2a>
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042c8:	b25b      	sxtb	r3, r3
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d103      	bne.n	80042d8 <vQueueWaitForMessageRestricted+0x40>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042d8:	f001 fdc0 	bl	8005e5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d106      	bne.n	80042f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3324      	adds	r3, #36	@ 0x24
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fc57 	bl	8004ba0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042f2:	6978      	ldr	r0, [r7, #20]
 80042f4:	f7ff fefc 	bl	80040f0 <prvUnlockQueue>
	}
 80042f8:	bf00      	nop
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08e      	sub	sp, #56	@ 0x38
 8004304:	af04      	add	r7, sp, #16
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800430e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	623b      	str	r3, [r7, #32]
}
 8004326:	bf00      	nop
 8004328:	bf00      	nop
 800432a:	e7fd      	b.n	8004328 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800432c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	61fb      	str	r3, [r7, #28]
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	e7fd      	b.n	8004346 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800434a:	235c      	movs	r3, #92	@ 0x5c
 800434c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b5c      	cmp	r3, #92	@ 0x5c
 8004352:	d00b      	beq.n	800436c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	61bb      	str	r3, [r7, #24]
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	e7fd      	b.n	8004368 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800436c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800436e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01e      	beq.n	80043b2 <xTaskCreateStatic+0xb2>
 8004374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01b      	beq.n	80043b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800437a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004382:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004386:	2202      	movs	r2, #2
 8004388:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800438c:	2300      	movs	r3, #0
 800438e:	9303      	str	r3, [sp, #12]
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	9302      	str	r3, [sp, #8]
 8004394:	f107 0314 	add.w	r3, r7, #20
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f850 	bl	800444a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043ac:	f000 f8de 	bl	800456c <prvAddNewTaskToReadyList>
 80043b0:	e001      	b.n	80043b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043b6:	697b      	ldr	r3, [r7, #20]
	}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3728      	adds	r7, #40	@ 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08c      	sub	sp, #48	@ 0x30
 80043c4:	af04      	add	r7, sp, #16
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f001 fe31 	bl	800603c <pvPortMalloc>
 80043da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00e      	beq.n	8004400 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043e2:	205c      	movs	r0, #92	@ 0x5c
 80043e4:	f001 fe2a 	bl	800603c <pvPortMalloc>
 80043e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80043f6:	e005      	b.n	8004404 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043f8:	6978      	ldr	r0, [r7, #20]
 80043fa:	f001 feed 	bl	80061d8 <vPortFree>
 80043fe:	e001      	b.n	8004404 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d017      	beq.n	800443a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004412:	88fa      	ldrh	r2, [r7, #6]
 8004414:	2300      	movs	r3, #0
 8004416:	9303      	str	r3, [sp, #12]
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	9302      	str	r3, [sp, #8]
 800441c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f80e 	bl	800444a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800442e:	69f8      	ldr	r0, [r7, #28]
 8004430:	f000 f89c 	bl	800456c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004434:	2301      	movs	r3, #1
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	e002      	b.n	8004440 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800443a:	f04f 33ff 	mov.w	r3, #4294967295
 800443e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004440:	69bb      	ldr	r3, [r7, #24]
	}
 8004442:	4618      	mov	r0, r3
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b088      	sub	sp, #32
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	461a      	mov	r2, r3
 8004462:	21a5      	movs	r1, #165	@ 0xa5
 8004464:	f001 ffd8 	bl	8006418 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004472:	3b01      	subs	r3, #1
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f023 0307 	bic.w	r3, r3, #7
 8004480:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00b      	beq.n	80044a4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	617b      	str	r3, [r7, #20]
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	e7fd      	b.n	80044a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d01f      	beq.n	80044ea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	e012      	b.n	80044d6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4413      	add	r3, r2
 80044b6:	7819      	ldrb	r1, [r3, #0]
 80044b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	4413      	add	r3, r2
 80044be:	3334      	adds	r3, #52	@ 0x34
 80044c0:	460a      	mov	r2, r1
 80044c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d006      	beq.n	80044de <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2b0f      	cmp	r3, #15
 80044da:	d9e9      	bls.n	80044b0 <prvInitialiseNewTask+0x66>
 80044dc:	e000      	b.n	80044e0 <prvInitialiseNewTask+0x96>
			{
				break;
 80044de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044e8:	e003      	b.n	80044f2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f4:	2b37      	cmp	r3, #55	@ 0x37
 80044f6:	d901      	bls.n	80044fc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044f8:	2337      	movs	r3, #55	@ 0x37
 80044fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004500:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004506:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450a:	2200      	movs	r2, #0
 800450c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800450e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004510:	3304      	adds	r3, #4
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fd7c 	bl	8003010 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	3318      	adds	r3, #24
 800451c:	4618      	mov	r0, r3
 800451e:	f7fe fd77 	bl	8003010 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004526:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004530:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004536:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453a:	2200      	movs	r2, #0
 800453c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800453e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	69b8      	ldr	r0, [r7, #24]
 800454c:	f001 fb20 	bl	8005b90 <pxPortInitialiseStack>
 8004550:	4602      	mov	r2, r0
 8004552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004554:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800455c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004562:	bf00      	nop
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004574:	f001 fc40 	bl	8005df8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004578:	4b2d      	ldr	r3, [pc, #180]	@ (8004630 <prvAddNewTaskToReadyList+0xc4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	4a2c      	ldr	r2, [pc, #176]	@ (8004630 <prvAddNewTaskToReadyList+0xc4>)
 8004580:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004582:	4b2c      	ldr	r3, [pc, #176]	@ (8004634 <prvAddNewTaskToReadyList+0xc8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800458a:	4a2a      	ldr	r2, [pc, #168]	@ (8004634 <prvAddNewTaskToReadyList+0xc8>)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004590:	4b27      	ldr	r3, [pc, #156]	@ (8004630 <prvAddNewTaskToReadyList+0xc4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d110      	bne.n	80045ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004598:	f000 fc30 	bl	8004dfc <prvInitialiseTaskLists>
 800459c:	e00d      	b.n	80045ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800459e:	4b26      	ldr	r3, [pc, #152]	@ (8004638 <prvAddNewTaskToReadyList+0xcc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045a6:	4b23      	ldr	r3, [pc, #140]	@ (8004634 <prvAddNewTaskToReadyList+0xc8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d802      	bhi.n	80045ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004634 <prvAddNewTaskToReadyList+0xc8>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045ba:	4b20      	ldr	r3, [pc, #128]	@ (800463c <prvAddNewTaskToReadyList+0xd0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	4a1e      	ldr	r2, [pc, #120]	@ (800463c <prvAddNewTaskToReadyList+0xd0>)
 80045c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	@ (800463c <prvAddNewTaskToReadyList+0xd0>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004640 <prvAddNewTaskToReadyList+0xd4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d903      	bls.n	80045e0 <prvAddNewTaskToReadyList+0x74>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	4a18      	ldr	r2, [pc, #96]	@ (8004640 <prvAddNewTaskToReadyList+0xd4>)
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4a15      	ldr	r2, [pc, #84]	@ (8004644 <prvAddNewTaskToReadyList+0xd8>)
 80045ee:	441a      	add	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f7fe fd17 	bl	800302a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045fc:	f001 fc2e 	bl	8005e5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004600:	4b0d      	ldr	r3, [pc, #52]	@ (8004638 <prvAddNewTaskToReadyList+0xcc>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00e      	beq.n	8004626 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004608:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <prvAddNewTaskToReadyList+0xc8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004612:	429a      	cmp	r2, r3
 8004614:	d207      	bcs.n	8004626 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004616:	4b0c      	ldr	r3, [pc, #48]	@ (8004648 <prvAddNewTaskToReadyList+0xdc>)
 8004618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000c70 	.word	0x20000c70
 8004634:	2000079c 	.word	0x2000079c
 8004638:	20000c7c 	.word	0x20000c7c
 800463c:	20000c8c 	.word	0x20000c8c
 8004640:	20000c78 	.word	0x20000c78
 8004644:	200007a0 	.word	0x200007a0
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d018      	beq.n	8004690 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800465e:	4b14      	ldr	r3, [pc, #80]	@ (80046b0 <vTaskDelay+0x64>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <vTaskDelay+0x32>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	60bb      	str	r3, [r7, #8]
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	e7fd      	b.n	800467a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800467e:	f000 f883 	bl	8004788 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004682:	2100      	movs	r1, #0
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fe15 	bl	80052b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800468a:	f000 f88b 	bl	80047a4 <xTaskResumeAll>
 800468e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d107      	bne.n	80046a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004696:	4b07      	ldr	r3, [pc, #28]	@ (80046b4 <vTaskDelay+0x68>)
 8004698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000c98 	.word	0x20000c98
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	@ 0x28
 80046bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046c6:	463a      	mov	r2, r7
 80046c8:	1d39      	adds	r1, r7, #4
 80046ca:	f107 0308 	add.w	r3, r7, #8
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe fc4a 	bl	8002f68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046d4:	6839      	ldr	r1, [r7, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	9202      	str	r2, [sp, #8]
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	2300      	movs	r3, #0
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	2300      	movs	r3, #0
 80046e4:	460a      	mov	r2, r1
 80046e6:	4922      	ldr	r1, [pc, #136]	@ (8004770 <vTaskStartScheduler+0xb8>)
 80046e8:	4822      	ldr	r0, [pc, #136]	@ (8004774 <vTaskStartScheduler+0xbc>)
 80046ea:	f7ff fe09 	bl	8004300 <xTaskCreateStatic>
 80046ee:	4603      	mov	r3, r0
 80046f0:	4a21      	ldr	r2, [pc, #132]	@ (8004778 <vTaskStartScheduler+0xc0>)
 80046f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046f4:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <vTaskStartScheduler+0xc0>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046fc:	2301      	movs	r3, #1
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	e001      	b.n	8004706 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d102      	bne.n	8004712 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800470c:	f000 fe26 	bl	800535c <xTimerCreateTimerTask>
 8004710:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d116      	bne.n	8004746 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	613b      	str	r3, [r7, #16]
}
 800472a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800472c:	4b13      	ldr	r3, [pc, #76]	@ (800477c <vTaskStartScheduler+0xc4>)
 800472e:	f04f 32ff 	mov.w	r2, #4294967295
 8004732:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004734:	4b12      	ldr	r3, [pc, #72]	@ (8004780 <vTaskStartScheduler+0xc8>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800473a:	4b12      	ldr	r3, [pc, #72]	@ (8004784 <vTaskStartScheduler+0xcc>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004740:	f001 fab6 	bl	8005cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004744:	e00f      	b.n	8004766 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d10b      	bne.n	8004766 <vTaskStartScheduler+0xae>
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	60fb      	str	r3, [r7, #12]
}
 8004760:	bf00      	nop
 8004762:	bf00      	nop
 8004764:	e7fd      	b.n	8004762 <vTaskStartScheduler+0xaa>
}
 8004766:	bf00      	nop
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	080064bc 	.word	0x080064bc
 8004774:	08004dcd 	.word	0x08004dcd
 8004778:	20000c94 	.word	0x20000c94
 800477c:	20000c90 	.word	0x20000c90
 8004780:	20000c7c 	.word	0x20000c7c
 8004784:	20000c74 	.word	0x20000c74

08004788 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800478c:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <vTaskSuspendAll+0x18>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3301      	adds	r3, #1
 8004792:	4a03      	ldr	r2, [pc, #12]	@ (80047a0 <vTaskSuspendAll+0x18>)
 8004794:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004796:	bf00      	nop
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000c98 	.word	0x20000c98

080047a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047b2:	4b42      	ldr	r3, [pc, #264]	@ (80048bc <xTaskResumeAll+0x118>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	603b      	str	r3, [r7, #0]
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	e7fd      	b.n	80047ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047d2:	f001 fb11 	bl	8005df8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047d6:	4b39      	ldr	r3, [pc, #228]	@ (80048bc <xTaskResumeAll+0x118>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3b01      	subs	r3, #1
 80047dc:	4a37      	ldr	r2, [pc, #220]	@ (80048bc <xTaskResumeAll+0x118>)
 80047de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047e0:	4b36      	ldr	r3, [pc, #216]	@ (80048bc <xTaskResumeAll+0x118>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d162      	bne.n	80048ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047e8:	4b35      	ldr	r3, [pc, #212]	@ (80048c0 <xTaskResumeAll+0x11c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d05e      	beq.n	80048ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047f0:	e02f      	b.n	8004852 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f2:	4b34      	ldr	r3, [pc, #208]	@ (80048c4 <xTaskResumeAll+0x120>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3318      	adds	r3, #24
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe fc70 	bl	80030e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3304      	adds	r3, #4
 8004808:	4618      	mov	r0, r3
 800480a:	f7fe fc6b 	bl	80030e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004812:	4b2d      	ldr	r3, [pc, #180]	@ (80048c8 <xTaskResumeAll+0x124>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d903      	bls.n	8004822 <xTaskResumeAll+0x7e>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481e:	4a2a      	ldr	r2, [pc, #168]	@ (80048c8 <xTaskResumeAll+0x124>)
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4a27      	ldr	r2, [pc, #156]	@ (80048cc <xTaskResumeAll+0x128>)
 8004830:	441a      	add	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3304      	adds	r3, #4
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f7fe fbf6 	bl	800302a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004842:	4b23      	ldr	r3, [pc, #140]	@ (80048d0 <xTaskResumeAll+0x12c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004848:	429a      	cmp	r2, r3
 800484a:	d302      	bcc.n	8004852 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800484c:	4b21      	ldr	r3, [pc, #132]	@ (80048d4 <xTaskResumeAll+0x130>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004852:	4b1c      	ldr	r3, [pc, #112]	@ (80048c4 <xTaskResumeAll+0x120>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1cb      	bne.n	80047f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004860:	f000 fb6a 	bl	8004f38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004864:	4b1c      	ldr	r3, [pc, #112]	@ (80048d8 <xTaskResumeAll+0x134>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d010      	beq.n	8004892 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004870:	f000 f858 	bl	8004924 <xTaskIncrementTick>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800487a:	4b16      	ldr	r3, [pc, #88]	@ (80048d4 <xTaskResumeAll+0x130>)
 800487c:	2201      	movs	r2, #1
 800487e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3b01      	subs	r3, #1
 8004884:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f1      	bne.n	8004870 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800488c:	4b12      	ldr	r3, [pc, #72]	@ (80048d8 <xTaskResumeAll+0x134>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004892:	4b10      	ldr	r3, [pc, #64]	@ (80048d4 <xTaskResumeAll+0x130>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800489a:	2301      	movs	r3, #1
 800489c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800489e:	4b0f      	ldr	r3, [pc, #60]	@ (80048dc <xTaskResumeAll+0x138>)
 80048a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048ae:	f001 fad5 	bl	8005e5c <vPortExitCritical>

	return xAlreadyYielded;
 80048b2:	68bb      	ldr	r3, [r7, #8]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000c98 	.word	0x20000c98
 80048c0:	20000c70 	.word	0x20000c70
 80048c4:	20000c30 	.word	0x20000c30
 80048c8:	20000c78 	.word	0x20000c78
 80048cc:	200007a0 	.word	0x200007a0
 80048d0:	2000079c 	.word	0x2000079c
 80048d4:	20000c84 	.word	0x20000c84
 80048d8:	20000c80 	.word	0x20000c80
 80048dc:	e000ed04 	.word	0xe000ed04

080048e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048e6:	4b05      	ldr	r3, [pc, #20]	@ (80048fc <xTaskGetTickCount+0x1c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048ec:	687b      	ldr	r3, [r7, #4]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000c74 	.word	0x20000c74

08004900 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004906:	f001 fb57 	bl	8005fb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800490a:	2300      	movs	r3, #0
 800490c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800490e:	4b04      	ldr	r3, [pc, #16]	@ (8004920 <xTaskGetTickCountFromISR+0x20>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004914:	683b      	ldr	r3, [r7, #0]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000c74 	.word	0x20000c74

08004924 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800492e:	4b4f      	ldr	r3, [pc, #316]	@ (8004a6c <xTaskIncrementTick+0x148>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f040 8090 	bne.w	8004a58 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004938:	4b4d      	ldr	r3, [pc, #308]	@ (8004a70 <xTaskIncrementTick+0x14c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004940:	4a4b      	ldr	r2, [pc, #300]	@ (8004a70 <xTaskIncrementTick+0x14c>)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d121      	bne.n	8004990 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800494c:	4b49      	ldr	r3, [pc, #292]	@ (8004a74 <xTaskIncrementTick+0x150>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00b      	beq.n	800496e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	603b      	str	r3, [r7, #0]
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	e7fd      	b.n	800496a <xTaskIncrementTick+0x46>
 800496e:	4b41      	ldr	r3, [pc, #260]	@ (8004a74 <xTaskIncrementTick+0x150>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	4b40      	ldr	r3, [pc, #256]	@ (8004a78 <xTaskIncrementTick+0x154>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a3e      	ldr	r2, [pc, #248]	@ (8004a74 <xTaskIncrementTick+0x150>)
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	4a3e      	ldr	r2, [pc, #248]	@ (8004a78 <xTaskIncrementTick+0x154>)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	4b3e      	ldr	r3, [pc, #248]	@ (8004a7c <xTaskIncrementTick+0x158>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3301      	adds	r3, #1
 8004988:	4a3c      	ldr	r2, [pc, #240]	@ (8004a7c <xTaskIncrementTick+0x158>)
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	f000 fad4 	bl	8004f38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004990:	4b3b      	ldr	r3, [pc, #236]	@ (8004a80 <xTaskIncrementTick+0x15c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	429a      	cmp	r2, r3
 8004998:	d349      	bcc.n	8004a2e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800499a:	4b36      	ldr	r3, [pc, #216]	@ (8004a74 <xTaskIncrementTick+0x150>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d104      	bne.n	80049ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049a4:	4b36      	ldr	r3, [pc, #216]	@ (8004a80 <xTaskIncrementTick+0x15c>)
 80049a6:	f04f 32ff 	mov.w	r2, #4294967295
 80049aa:	601a      	str	r2, [r3, #0]
					break;
 80049ac:	e03f      	b.n	8004a2e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ae:	4b31      	ldr	r3, [pc, #196]	@ (8004a74 <xTaskIncrementTick+0x150>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d203      	bcs.n	80049ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004a80 <xTaskIncrementTick+0x15c>)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049cc:	e02f      	b.n	8004a2e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	3304      	adds	r3, #4
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe fb86 	bl	80030e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d004      	beq.n	80049ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	3318      	adds	r3, #24
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe fb7d 	bl	80030e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ee:	4b25      	ldr	r3, [pc, #148]	@ (8004a84 <xTaskIncrementTick+0x160>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d903      	bls.n	80049fe <xTaskIncrementTick+0xda>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fa:	4a22      	ldr	r2, [pc, #136]	@ (8004a84 <xTaskIncrementTick+0x160>)
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a88 <xTaskIncrementTick+0x164>)
 8004a0c:	441a      	add	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4619      	mov	r1, r3
 8004a14:	4610      	mov	r0, r2
 8004a16:	f7fe fb08 	bl	800302a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004a8c <xTaskIncrementTick+0x168>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d3b8      	bcc.n	800499a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a2c:	e7b5      	b.n	800499a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a2e:	4b17      	ldr	r3, [pc, #92]	@ (8004a8c <xTaskIncrementTick+0x168>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a34:	4914      	ldr	r1, [pc, #80]	@ (8004a88 <xTaskIncrementTick+0x164>)
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d901      	bls.n	8004a4a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004a46:	2301      	movs	r3, #1
 8004a48:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a4a:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <xTaskIncrementTick+0x16c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004a52:	2301      	movs	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	e004      	b.n	8004a62 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a58:	4b0e      	ldr	r3, [pc, #56]	@ (8004a94 <xTaskIncrementTick+0x170>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004a94 <xTaskIncrementTick+0x170>)
 8004a60:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a62:	697b      	ldr	r3, [r7, #20]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000c98 	.word	0x20000c98
 8004a70:	20000c74 	.word	0x20000c74
 8004a74:	20000c28 	.word	0x20000c28
 8004a78:	20000c2c 	.word	0x20000c2c
 8004a7c:	20000c88 	.word	0x20000c88
 8004a80:	20000c90 	.word	0x20000c90
 8004a84:	20000c78 	.word	0x20000c78
 8004a88:	200007a0 	.word	0x200007a0
 8004a8c:	2000079c 	.word	0x2000079c
 8004a90:	20000c84 	.word	0x20000c84
 8004a94:	20000c80 	.word	0x20000c80

08004a98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a9e:	4b28      	ldr	r3, [pc, #160]	@ (8004b40 <vTaskSwitchContext+0xa8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004aa6:	4b27      	ldr	r3, [pc, #156]	@ (8004b44 <vTaskSwitchContext+0xac>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004aac:	e042      	b.n	8004b34 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004aae:	4b25      	ldr	r3, [pc, #148]	@ (8004b44 <vTaskSwitchContext+0xac>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab4:	4b24      	ldr	r3, [pc, #144]	@ (8004b48 <vTaskSwitchContext+0xb0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e011      	b.n	8004ae0 <vTaskSwitchContext+0x48>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <vTaskSwitchContext+0x42>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	607b      	str	r3, [r7, #4]
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	e7fd      	b.n	8004ad6 <vTaskSwitchContext+0x3e>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	491a      	ldr	r1, [pc, #104]	@ (8004b4c <vTaskSwitchContext+0xb4>)
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0e3      	beq.n	8004abc <vTaskSwitchContext+0x24>
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4a13      	ldr	r2, [pc, #76]	@ (8004b4c <vTaskSwitchContext+0xb4>)
 8004b00:	4413      	add	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	605a      	str	r2, [r3, #4]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	3308      	adds	r3, #8
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d104      	bne.n	8004b24 <vTaskSwitchContext+0x8c>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	605a      	str	r2, [r3, #4]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	4a09      	ldr	r2, [pc, #36]	@ (8004b50 <vTaskSwitchContext+0xb8>)
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4a06      	ldr	r2, [pc, #24]	@ (8004b48 <vTaskSwitchContext+0xb0>)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6013      	str	r3, [r2, #0]
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	20000c98 	.word	0x20000c98
 8004b44:	20000c84 	.word	0x20000c84
 8004b48:	20000c78 	.word	0x20000c78
 8004b4c:	200007a0 	.word	0x200007a0
 8004b50:	2000079c 	.word	0x2000079c

08004b54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10b      	bne.n	8004b7c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	60fb      	str	r3, [r7, #12]
}
 8004b76:	bf00      	nop
 8004b78:	bf00      	nop
 8004b7a:	e7fd      	b.n	8004b78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b7c:	4b07      	ldr	r3, [pc, #28]	@ (8004b9c <vTaskPlaceOnEventList+0x48>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3318      	adds	r3, #24
 8004b82:	4619      	mov	r1, r3
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fe fa74 	bl	8003072 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	6838      	ldr	r0, [r7, #0]
 8004b8e:	f000 fb91 	bl	80052b4 <prvAddCurrentTaskToDelayedList>
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	2000079c 	.word	0x2000079c

08004ba0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	617b      	str	r3, [r7, #20]
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	e7fd      	b.n	8004bc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bca:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3318      	adds	r3, #24
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7fe fa29 	bl	800302a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004bde:	f04f 33ff 	mov.w	r3, #4294967295
 8004be2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	68b8      	ldr	r0, [r7, #8]
 8004be8:	f000 fb64 	bl	80052b4 <prvAddCurrentTaskToDelayedList>
	}
 8004bec:	bf00      	nop
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	2000079c 	.word	0x2000079c

08004bf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10b      	bne.n	8004c26 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	60fb      	str	r3, [r7, #12]
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	e7fd      	b.n	8004c22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	3318      	adds	r3, #24
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fa5a 	bl	80030e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca8 <xTaskRemoveFromEventList+0xb0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d11d      	bne.n	8004c74 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe fa51 	bl	80030e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c46:	4b19      	ldr	r3, [pc, #100]	@ (8004cac <xTaskRemoveFromEventList+0xb4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d903      	bls.n	8004c56 <xTaskRemoveFromEventList+0x5e>
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	4a16      	ldr	r2, [pc, #88]	@ (8004cac <xTaskRemoveFromEventList+0xb4>)
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4a13      	ldr	r2, [pc, #76]	@ (8004cb0 <xTaskRemoveFromEventList+0xb8>)
 8004c64:	441a      	add	r2, r3
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f7fe f9dc 	bl	800302a <vListInsertEnd>
 8004c72:	e005      	b.n	8004c80 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	3318      	adds	r3, #24
 8004c78:	4619      	mov	r1, r3
 8004c7a:	480e      	ldr	r0, [pc, #56]	@ (8004cb4 <xTaskRemoveFromEventList+0xbc>)
 8004c7c:	f7fe f9d5 	bl	800302a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c84:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb8 <xTaskRemoveFromEventList+0xc0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d905      	bls.n	8004c9a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c92:	4b0a      	ldr	r3, [pc, #40]	@ (8004cbc <xTaskRemoveFromEventList+0xc4>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	e001      	b.n	8004c9e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c9e:	697b      	ldr	r3, [r7, #20]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000c98 	.word	0x20000c98
 8004cac:	20000c78 	.word	0x20000c78
 8004cb0:	200007a0 	.word	0x200007a0
 8004cb4:	20000c30 	.word	0x20000c30
 8004cb8:	2000079c 	.word	0x2000079c
 8004cbc:	20000c84 	.word	0x20000c84

08004cc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cc8:	4b06      	ldr	r3, [pc, #24]	@ (8004ce4 <vTaskInternalSetTimeOutState+0x24>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cd0:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <vTaskInternalSetTimeOutState+0x28>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	605a      	str	r2, [r3, #4]
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	20000c88 	.word	0x20000c88
 8004ce8:	20000c74 	.word	0x20000c74

08004cec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10b      	bne.n	8004d14 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	613b      	str	r3, [r7, #16]
}
 8004d0e:	bf00      	nop
 8004d10:	bf00      	nop
 8004d12:	e7fd      	b.n	8004d10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	60fb      	str	r3, [r7, #12]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004d32:	f001 f861 	bl	8005df8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d36:	4b1d      	ldr	r3, [pc, #116]	@ (8004dac <xTaskCheckForTimeOut+0xc0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d102      	bne.n	8004d56 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e023      	b.n	8004d9e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b15      	ldr	r3, [pc, #84]	@ (8004db0 <xTaskCheckForTimeOut+0xc4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d007      	beq.n	8004d72 <xTaskCheckForTimeOut+0x86>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d302      	bcc.n	8004d72 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	61fb      	str	r3, [r7, #28]
 8004d70:	e015      	b.n	8004d9e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d20b      	bcs.n	8004d94 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	1ad2      	subs	r2, r2, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff ff99 	bl	8004cc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	e004      	b.n	8004d9e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d9e:	f001 f85d 	bl	8005e5c <vPortExitCritical>

	return xReturn;
 8004da2:	69fb      	ldr	r3, [r7, #28]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3720      	adds	r7, #32
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20000c74 	.word	0x20000c74
 8004db0:	20000c88 	.word	0x20000c88

08004db4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004db8:	4b03      	ldr	r3, [pc, #12]	@ (8004dc8 <vTaskMissedYield+0x14>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	20000c84 	.word	0x20000c84

08004dcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dd4:	f000 f852 	bl	8004e7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dd8:	4b06      	ldr	r3, [pc, #24]	@ (8004df4 <prvIdleTask+0x28>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d9f9      	bls.n	8004dd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004de0:	4b05      	ldr	r3, [pc, #20]	@ (8004df8 <prvIdleTask+0x2c>)
 8004de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004df0:	e7f0      	b.n	8004dd4 <prvIdleTask+0x8>
 8004df2:	bf00      	nop
 8004df4:	200007a0 	.word	0x200007a0
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	e00c      	b.n	8004e22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4a12      	ldr	r2, [pc, #72]	@ (8004e5c <prvInitialiseTaskLists+0x60>)
 8004e14:	4413      	add	r3, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe f8da 	bl	8002fd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	607b      	str	r3, [r7, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b37      	cmp	r3, #55	@ 0x37
 8004e26:	d9ef      	bls.n	8004e08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e28:	480d      	ldr	r0, [pc, #52]	@ (8004e60 <prvInitialiseTaskLists+0x64>)
 8004e2a:	f7fe f8d1 	bl	8002fd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e2e:	480d      	ldr	r0, [pc, #52]	@ (8004e64 <prvInitialiseTaskLists+0x68>)
 8004e30:	f7fe f8ce 	bl	8002fd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e34:	480c      	ldr	r0, [pc, #48]	@ (8004e68 <prvInitialiseTaskLists+0x6c>)
 8004e36:	f7fe f8cb 	bl	8002fd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e3a:	480c      	ldr	r0, [pc, #48]	@ (8004e6c <prvInitialiseTaskLists+0x70>)
 8004e3c:	f7fe f8c8 	bl	8002fd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e40:	480b      	ldr	r0, [pc, #44]	@ (8004e70 <prvInitialiseTaskLists+0x74>)
 8004e42:	f7fe f8c5 	bl	8002fd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e46:	4b0b      	ldr	r3, [pc, #44]	@ (8004e74 <prvInitialiseTaskLists+0x78>)
 8004e48:	4a05      	ldr	r2, [pc, #20]	@ (8004e60 <prvInitialiseTaskLists+0x64>)
 8004e4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e78 <prvInitialiseTaskLists+0x7c>)
 8004e4e:	4a05      	ldr	r2, [pc, #20]	@ (8004e64 <prvInitialiseTaskLists+0x68>)
 8004e50:	601a      	str	r2, [r3, #0]
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	200007a0 	.word	0x200007a0
 8004e60:	20000c00 	.word	0x20000c00
 8004e64:	20000c14 	.word	0x20000c14
 8004e68:	20000c30 	.word	0x20000c30
 8004e6c:	20000c44 	.word	0x20000c44
 8004e70:	20000c5c 	.word	0x20000c5c
 8004e74:	20000c28 	.word	0x20000c28
 8004e78:	20000c2c 	.word	0x20000c2c

08004e7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e82:	e019      	b.n	8004eb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e84:	f000 ffb8 	bl	8005df8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e88:	4b10      	ldr	r3, [pc, #64]	@ (8004ecc <prvCheckTasksWaitingTermination+0x50>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fe f925 	bl	80030e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed0 <prvCheckTasksWaitingTermination+0x54>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8004ed0 <prvCheckTasksWaitingTermination+0x54>)
 8004ea2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <prvCheckTasksWaitingTermination+0x58>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed4 <prvCheckTasksWaitingTermination+0x58>)
 8004eac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004eae:	f000 ffd5 	bl	8005e5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f810 	bl	8004ed8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eb8:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <prvCheckTasksWaitingTermination+0x58>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e1      	bne.n	8004e84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000c44 	.word	0x20000c44
 8004ed0:	20000c70 	.word	0x20000c70
 8004ed4:	20000c58 	.word	0x20000c58

08004ed8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d108      	bne.n	8004efc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 f972 	bl	80061d8 <vPortFree>
				vPortFree( pxTCB );
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f001 f96f 	bl	80061d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004efa:	e019      	b.n	8004f30 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d103      	bne.n	8004f0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f001 f966 	bl	80061d8 <vPortFree>
	}
 8004f0c:	e010      	b.n	8004f30 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d00b      	beq.n	8004f30 <prvDeleteTCB+0x58>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	60fb      	str	r3, [r7, #12]
}
 8004f2a:	bf00      	nop
 8004f2c:	bf00      	nop
 8004f2e:	e7fd      	b.n	8004f2c <prvDeleteTCB+0x54>
	}
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <prvResetNextTaskUnblockTime+0x38>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f48:	4b0a      	ldr	r3, [pc, #40]	@ (8004f74 <prvResetNextTaskUnblockTime+0x3c>)
 8004f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f50:	e008      	b.n	8004f64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f52:	4b07      	ldr	r3, [pc, #28]	@ (8004f70 <prvResetNextTaskUnblockTime+0x38>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4a04      	ldr	r2, [pc, #16]	@ (8004f74 <prvResetNextTaskUnblockTime+0x3c>)
 8004f62:	6013      	str	r3, [r2, #0]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	20000c28 	.word	0x20000c28
 8004f74:	20000c90 	.word	0x20000c90

08004f78 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004f7e:	4b05      	ldr	r3, [pc, #20]	@ (8004f94 <xTaskGetCurrentTaskHandle+0x1c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004f84:	687b      	ldr	r3, [r7, #4]
	}
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	2000079c 	.word	0x2000079c

08004f98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fcc <xTaskGetSchedulerState+0x34>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	e008      	b.n	8004fbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fac:	4b08      	ldr	r3, [pc, #32]	@ (8004fd0 <xTaskGetSchedulerState+0x38>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	e001      	b.n	8004fbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fbe:	687b      	ldr	r3, [r7, #4]
	}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	20000c7c 	.word	0x20000c7c
 8004fd0:	20000c98 	.word	0x20000c98

08004fd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d051      	beq.n	800508e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fee:	4b2a      	ldr	r3, [pc, #168]	@ (8005098 <xTaskPriorityInherit+0xc4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d241      	bcs.n	800507c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	db06      	blt.n	800500e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005000:	4b25      	ldr	r3, [pc, #148]	@ (8005098 <xTaskPriorityInherit+0xc4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005006:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	6959      	ldr	r1, [r3, #20]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4a1f      	ldr	r2, [pc, #124]	@ (800509c <xTaskPriorityInherit+0xc8>)
 8005020:	4413      	add	r3, r2
 8005022:	4299      	cmp	r1, r3
 8005024:	d122      	bne.n	800506c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	3304      	adds	r3, #4
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe f85a 	bl	80030e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005030:	4b19      	ldr	r3, [pc, #100]	@ (8005098 <xTaskPriorityInherit+0xc4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800503e:	4b18      	ldr	r3, [pc, #96]	@ (80050a0 <xTaskPriorityInherit+0xcc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d903      	bls.n	800504e <xTaskPriorityInherit+0x7a>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	4a15      	ldr	r2, [pc, #84]	@ (80050a0 <xTaskPriorityInherit+0xcc>)
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4a10      	ldr	r2, [pc, #64]	@ (800509c <xTaskPriorityInherit+0xc8>)
 800505c:	441a      	add	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	3304      	adds	r3, #4
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f7fd ffe0 	bl	800302a <vListInsertEnd>
 800506a:	e004      	b.n	8005076 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800506c:	4b0a      	ldr	r3, [pc, #40]	@ (8005098 <xTaskPriorityInherit+0xc4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005076:	2301      	movs	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	e008      	b.n	800508e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005080:	4b05      	ldr	r3, [pc, #20]	@ (8005098 <xTaskPriorityInherit+0xc4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005086:	429a      	cmp	r2, r3
 8005088:	d201      	bcs.n	800508e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800508a:	2301      	movs	r3, #1
 800508c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800508e:	68fb      	ldr	r3, [r7, #12]
	}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	2000079c 	.word	0x2000079c
 800509c:	200007a0 	.word	0x200007a0
 80050a0:	20000c78 	.word	0x20000c78

080050a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d058      	beq.n	800516c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005178 <xTaskPriorityDisinherit+0xd4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d00b      	beq.n	80050dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	60fb      	str	r3, [r7, #12]
}
 80050d6:	bf00      	nop
 80050d8:	bf00      	nop
 80050da:	e7fd      	b.n	80050d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	60bb      	str	r3, [r7, #8]
}
 80050f6:	bf00      	nop
 80050f8:	bf00      	nop
 80050fa:	e7fd      	b.n	80050f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005100:	1e5a      	subs	r2, r3, #1
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800510e:	429a      	cmp	r2, r3
 8005110:	d02c      	beq.n	800516c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005116:	2b00      	cmp	r3, #0
 8005118:	d128      	bne.n	800516c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	3304      	adds	r3, #4
 800511e:	4618      	mov	r0, r3
 8005120:	f7fd ffe0 	bl	80030e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800513c:	4b0f      	ldr	r3, [pc, #60]	@ (800517c <xTaskPriorityDisinherit+0xd8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d903      	bls.n	800514c <xTaskPriorityDisinherit+0xa8>
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005148:	4a0c      	ldr	r2, [pc, #48]	@ (800517c <xTaskPriorityDisinherit+0xd8>)
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4a09      	ldr	r2, [pc, #36]	@ (8005180 <xTaskPriorityDisinherit+0xdc>)
 800515a:	441a      	add	r2, r3
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	3304      	adds	r3, #4
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f7fd ff61 	bl	800302a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800516c:	697b      	ldr	r3, [r7, #20]
	}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	2000079c 	.word	0x2000079c
 800517c:	20000c78 	.word	0x20000c78
 8005180:	200007a0 	.word	0x200007a0

08005184 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005192:	2301      	movs	r3, #1
 8005194:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d06c      	beq.n	8005276 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	60fb      	str	r3, [r7, #12]
}
 80051b6:	bf00      	nop
 80051b8:	bf00      	nop
 80051ba:	e7fd      	b.n	80051b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d902      	bls.n	80051cc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	61fb      	str	r3, [r7, #28]
 80051ca:	e002      	b.n	80051d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d04c      	beq.n	8005276 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d147      	bne.n	8005276 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80051e6:	4b26      	ldr	r3, [pc, #152]	@ (8005280 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d10b      	bne.n	8005208 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	60bb      	str	r3, [r7, #8]
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	db04      	blt.n	8005226 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	6959      	ldr	r1, [r3, #20]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4a13      	ldr	r2, [pc, #76]	@ (8005284 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005236:	4413      	add	r3, r2
 8005238:	4299      	cmp	r1, r3
 800523a:	d11c      	bne.n	8005276 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	3304      	adds	r3, #4
 8005240:	4618      	mov	r0, r3
 8005242:	f7fd ff4f 	bl	80030e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524a:	4b0f      	ldr	r3, [pc, #60]	@ (8005288 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d903      	bls.n	800525a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005256:	4a0c      	ldr	r2, [pc, #48]	@ (8005288 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4a07      	ldr	r2, [pc, #28]	@ (8005284 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005268:	441a      	add	r2, r3
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	3304      	adds	r3, #4
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f7fd feda 	bl	800302a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005276:	bf00      	nop
 8005278:	3720      	adds	r7, #32
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	2000079c 	.word	0x2000079c
 8005284:	200007a0 	.word	0x200007a0
 8005288:	20000c78 	.word	0x20000c78

0800528c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005290:	4b07      	ldr	r3, [pc, #28]	@ (80052b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005298:	4b05      	ldr	r3, [pc, #20]	@ (80052b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800529e:	3201      	adds	r2, #1
 80052a0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80052a2:	4b03      	ldr	r3, [pc, #12]	@ (80052b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80052a4:	681b      	ldr	r3, [r3, #0]
	}
 80052a6:	4618      	mov	r0, r3
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	2000079c 	.word	0x2000079c

080052b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052be:	4b21      	ldr	r3, [pc, #132]	@ (8005344 <prvAddCurrentTaskToDelayedList+0x90>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052c4:	4b20      	ldr	r3, [pc, #128]	@ (8005348 <prvAddCurrentTaskToDelayedList+0x94>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3304      	adds	r3, #4
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fd ff0a 	bl	80030e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d6:	d10a      	bne.n	80052ee <prvAddCurrentTaskToDelayedList+0x3a>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052de:	4b1a      	ldr	r3, [pc, #104]	@ (8005348 <prvAddCurrentTaskToDelayedList+0x94>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4819      	ldr	r0, [pc, #100]	@ (800534c <prvAddCurrentTaskToDelayedList+0x98>)
 80052e8:	f7fd fe9f 	bl	800302a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052ec:	e026      	b.n	800533c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4413      	add	r3, r2
 80052f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052f6:	4b14      	ldr	r3, [pc, #80]	@ (8005348 <prvAddCurrentTaskToDelayedList+0x94>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	429a      	cmp	r2, r3
 8005304:	d209      	bcs.n	800531a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005306:	4b12      	ldr	r3, [pc, #72]	@ (8005350 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4b0f      	ldr	r3, [pc, #60]	@ (8005348 <prvAddCurrentTaskToDelayedList+0x94>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3304      	adds	r3, #4
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f7fd fead 	bl	8003072 <vListInsert>
}
 8005318:	e010      	b.n	800533c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800531a:	4b0e      	ldr	r3, [pc, #56]	@ (8005354 <prvAddCurrentTaskToDelayedList+0xa0>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4b0a      	ldr	r3, [pc, #40]	@ (8005348 <prvAddCurrentTaskToDelayedList+0x94>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3304      	adds	r3, #4
 8005324:	4619      	mov	r1, r3
 8005326:	4610      	mov	r0, r2
 8005328:	f7fd fea3 	bl	8003072 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800532c:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <prvAddCurrentTaskToDelayedList+0xa4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	429a      	cmp	r2, r3
 8005334:	d202      	bcs.n	800533c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005336:	4a08      	ldr	r2, [pc, #32]	@ (8005358 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	6013      	str	r3, [r2, #0]
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20000c74 	.word	0x20000c74
 8005348:	2000079c 	.word	0x2000079c
 800534c:	20000c5c 	.word	0x20000c5c
 8005350:	20000c2c 	.word	0x20000c2c
 8005354:	20000c28 	.word	0x20000c28
 8005358:	20000c90 	.word	0x20000c90

0800535c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08a      	sub	sp, #40	@ 0x28
 8005360:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005366:	f000 fbb1 	bl	8005acc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800536a:	4b1d      	ldr	r3, [pc, #116]	@ (80053e0 <xTimerCreateTimerTask+0x84>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d021      	beq.n	80053b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005376:	2300      	movs	r3, #0
 8005378:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800537a:	1d3a      	adds	r2, r7, #4
 800537c:	f107 0108 	add.w	r1, r7, #8
 8005380:	f107 030c 	add.w	r3, r7, #12
 8005384:	4618      	mov	r0, r3
 8005386:	f7fd fe09 	bl	8002f9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	9202      	str	r2, [sp, #8]
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	2302      	movs	r3, #2
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	2300      	movs	r3, #0
 800539a:	460a      	mov	r2, r1
 800539c:	4911      	ldr	r1, [pc, #68]	@ (80053e4 <xTimerCreateTimerTask+0x88>)
 800539e:	4812      	ldr	r0, [pc, #72]	@ (80053e8 <xTimerCreateTimerTask+0x8c>)
 80053a0:	f7fe ffae 	bl	8004300 <xTaskCreateStatic>
 80053a4:	4603      	mov	r3, r0
 80053a6:	4a11      	ldr	r2, [pc, #68]	@ (80053ec <xTimerCreateTimerTask+0x90>)
 80053a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053aa:	4b10      	ldr	r3, [pc, #64]	@ (80053ec <xTimerCreateTimerTask+0x90>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053b2:	2301      	movs	r3, #1
 80053b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10b      	bne.n	80053d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	613b      	str	r3, [r7, #16]
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	e7fd      	b.n	80053d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80053d4:	697b      	ldr	r3, [r7, #20]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000ccc 	.word	0x20000ccc
 80053e4:	080064c4 	.word	0x080064c4
 80053e8:	08005665 	.word	0x08005665
 80053ec:	20000cd0 	.word	0x20000cd0

080053f0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80053fe:	202c      	movs	r0, #44	@ 0x2c
 8005400:	f000 fe1c 	bl	800603c <pvPortMalloc>
 8005404:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00d      	beq.n	8005428 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	9301      	str	r3, [sp, #4]
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 f845 	bl	80054b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005428:	697b      	ldr	r3, [r7, #20]
	}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005432:	b580      	push	{r7, lr}
 8005434:	b08a      	sub	sp, #40	@ 0x28
 8005436:	af02      	add	r7, sp, #8
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005440:	232c      	movs	r3, #44	@ 0x2c
 8005442:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b2c      	cmp	r3, #44	@ 0x2c
 8005448:	d00b      	beq.n	8005462 <xTimerCreateStatic+0x30>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	61bb      	str	r3, [r7, #24]
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	e7fd      	b.n	800545e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005462:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <xTimerCreateStatic+0x50>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	617b      	str	r3, [r7, #20]
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	e7fd      	b.n	800547e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005484:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00d      	beq.n	80054a8 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	9301      	str	r3, [sp, #4]
 8005498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f805 	bl	80054b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80054a8:	69fb      	ldr	r3, [r7, #28]
	}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3720      	adds	r7, #32
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b086      	sub	sp, #24
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10b      	bne.n	80054de <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	617b      	str	r3, [r7, #20]
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	e7fd      	b.n	80054da <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01e      	beq.n	8005522 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80054e4:	f000 faf2 	bl	8005acc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80054e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	6a3a      	ldr	r2, [r7, #32]
 80054fe:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	3304      	adds	r3, #4
 8005504:	4618      	mov	r0, r3
 8005506:	f7fd fd83 	bl	8003010 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005516:	f043 0304 	orr.w	r3, r3, #4
 800551a:	b2da      	uxtb	r2, r3
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005522:	bf00      	nop
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	@ 0x28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800553a:	2300      	movs	r3, #0
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10b      	bne.n	800555c <xTimerGenericCommand+0x30>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	623b      	str	r3, [r7, #32]
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800555c:	4b19      	ldr	r3, [pc, #100]	@ (80055c4 <xTimerGenericCommand+0x98>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d02a      	beq.n	80055ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b05      	cmp	r3, #5
 8005574:	dc18      	bgt.n	80055a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005576:	f7ff fd0f 	bl	8004f98 <xTaskGetSchedulerState>
 800557a:	4603      	mov	r3, r0
 800557c:	2b02      	cmp	r3, #2
 800557e:	d109      	bne.n	8005594 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005580:	4b10      	ldr	r3, [pc, #64]	@ (80055c4 <xTimerGenericCommand+0x98>)
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	f107 0110 	add.w	r1, r7, #16
 8005588:	2300      	movs	r3, #0
 800558a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800558c:	f7fe f840 	bl	8003610 <xQueueGenericSend>
 8005590:	6278      	str	r0, [r7, #36]	@ 0x24
 8005592:	e012      	b.n	80055ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005594:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <xTimerGenericCommand+0x98>)
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	f107 0110 	add.w	r1, r7, #16
 800559c:	2300      	movs	r3, #0
 800559e:	2200      	movs	r2, #0
 80055a0:	f7fe f836 	bl	8003610 <xQueueGenericSend>
 80055a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80055a6:	e008      	b.n	80055ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055a8:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <xTimerGenericCommand+0x98>)
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	f107 0110 	add.w	r1, r7, #16
 80055b0:	2300      	movs	r3, #0
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	f7fe f92e 	bl	8003814 <xQueueGenericSendFromISR>
 80055b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3728      	adds	r7, #40	@ 0x28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000ccc 	.word	0x20000ccc

080055c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d2:	4b23      	ldr	r3, [pc, #140]	@ (8005660 <prvProcessExpiredTimer+0x98>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	3304      	adds	r3, #4
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fd fd7f 	bl	80030e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d023      	beq.n	800563c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	699a      	ldr	r2, [r3, #24]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	18d1      	adds	r1, r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	6978      	ldr	r0, [r7, #20]
 8005602:	f000 f8d5 	bl	80057b0 <prvInsertTimerInActiveList>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d020      	beq.n	800564e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800560c:	2300      	movs	r3, #0
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	2300      	movs	r3, #0
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	2100      	movs	r1, #0
 8005616:	6978      	ldr	r0, [r7, #20]
 8005618:	f7ff ff88 	bl	800552c <xTimerGenericCommand>
 800561c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d114      	bne.n	800564e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	60fb      	str	r3, [r7, #12]
}
 8005636:	bf00      	nop
 8005638:	bf00      	nop
 800563a:	e7fd      	b.n	8005638 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	b2da      	uxtb	r2, r3
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	6978      	ldr	r0, [r7, #20]
 8005654:	4798      	blx	r3
}
 8005656:	bf00      	nop
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000cc4 	.word	0x20000cc4

08005664 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800566c:	f107 0308 	add.w	r3, r7, #8
 8005670:	4618      	mov	r0, r3
 8005672:	f000 f859 	bl	8005728 <prvGetNextExpireTime>
 8005676:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4619      	mov	r1, r3
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f805 	bl	800568c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005682:	f000 f8d7 	bl	8005834 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005686:	bf00      	nop
 8005688:	e7f0      	b.n	800566c <prvTimerTask+0x8>
	...

0800568c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005696:	f7ff f877 	bl	8004788 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800569a:	f107 0308 	add.w	r3, r7, #8
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f866 	bl	8005770 <prvSampleTimeNow>
 80056a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d130      	bne.n	800570e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <prvProcessTimerOrBlockTask+0x3c>
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d806      	bhi.n	80056c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056ba:	f7ff f873 	bl	80047a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ff81 	bl	80055c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056c6:	e024      	b.n	8005712 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056ce:	4b13      	ldr	r3, [pc, #76]	@ (800571c <prvProcessTimerOrBlockTask+0x90>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <prvProcessTimerOrBlockTask+0x50>
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <prvProcessTimerOrBlockTask+0x52>
 80056dc:	2300      	movs	r3, #0
 80056de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005720 <prvProcessTimerOrBlockTask+0x94>)
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	4619      	mov	r1, r3
 80056ee:	f7fe fdd3 	bl	8004298 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056f2:	f7ff f857 	bl	80047a4 <xTaskResumeAll>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056fc:	4b09      	ldr	r3, [pc, #36]	@ (8005724 <prvProcessTimerOrBlockTask+0x98>)
 80056fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	f3bf 8f6f 	isb	sy
}
 800570c:	e001      	b.n	8005712 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800570e:	f7ff f849 	bl	80047a4 <xTaskResumeAll>
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000cc8 	.word	0x20000cc8
 8005720:	20000ccc 	.word	0x20000ccc
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005730:	4b0e      	ldr	r3, [pc, #56]	@ (800576c <prvGetNextExpireTime+0x44>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <prvGetNextExpireTime+0x16>
 800573a:	2201      	movs	r2, #1
 800573c:	e000      	b.n	8005740 <prvGetNextExpireTime+0x18>
 800573e:	2200      	movs	r2, #0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d105      	bne.n	8005758 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800574c:	4b07      	ldr	r3, [pc, #28]	@ (800576c <prvGetNextExpireTime+0x44>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	e001      	b.n	800575c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800575c:	68fb      	ldr	r3, [r7, #12]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000cc4 	.word	0x20000cc4

08005770 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005778:	f7ff f8b2 	bl	80048e0 <xTaskGetTickCount>
 800577c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800577e:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <prvSampleTimeNow+0x3c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	429a      	cmp	r2, r3
 8005786:	d205      	bcs.n	8005794 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005788:	f000 f93a 	bl	8005a00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e002      	b.n	800579a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800579a:	4a04      	ldr	r2, [pc, #16]	@ (80057ac <prvSampleTimeNow+0x3c>)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057a0:	68fb      	ldr	r3, [r7, #12]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000cd4 	.word	0x20000cd4

080057b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d812      	bhi.n	80057fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	1ad2      	subs	r2, r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d302      	bcc.n	80057ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057e4:	2301      	movs	r3, #1
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	e01b      	b.n	8005822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057ea:	4b10      	ldr	r3, [pc, #64]	@ (800582c <prvInsertTimerInActiveList+0x7c>)
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3304      	adds	r3, #4
 80057f2:	4619      	mov	r1, r3
 80057f4:	4610      	mov	r0, r2
 80057f6:	f7fd fc3c 	bl	8003072 <vListInsert>
 80057fa:	e012      	b.n	8005822 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d206      	bcs.n	8005812 <prvInsertTimerInActiveList+0x62>
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800580c:	2301      	movs	r3, #1
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e007      	b.n	8005822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005812:	4b07      	ldr	r3, [pc, #28]	@ (8005830 <prvInsertTimerInActiveList+0x80>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3304      	adds	r3, #4
 800581a:	4619      	mov	r1, r3
 800581c:	4610      	mov	r0, r2
 800581e:	f7fd fc28 	bl	8003072 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005822:	697b      	ldr	r3, [r7, #20]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	20000cc8 	.word	0x20000cc8
 8005830:	20000cc4 	.word	0x20000cc4

08005834 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08e      	sub	sp, #56	@ 0x38
 8005838:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800583a:	e0ce      	b.n	80059da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	da19      	bge.n	8005876 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005842:	1d3b      	adds	r3, r7, #4
 8005844:	3304      	adds	r3, #4
 8005846:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10b      	bne.n	8005866 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	61fb      	str	r3, [r7, #28]
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	e7fd      	b.n	8005862 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800586c:	6850      	ldr	r0, [r2, #4]
 800586e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005870:	6892      	ldr	r2, [r2, #8]
 8005872:	4611      	mov	r1, r2
 8005874:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f2c0 80ae 	blt.w	80059da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d004      	beq.n	8005894 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	3304      	adds	r3, #4
 800588e:	4618      	mov	r0, r3
 8005890:	f7fd fc28 	bl	80030e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005894:	463b      	mov	r3, r7
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff ff6a 	bl	8005770 <prvSampleTimeNow>
 800589c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b09      	cmp	r3, #9
 80058a2:	f200 8097 	bhi.w	80059d4 <prvProcessReceivedCommands+0x1a0>
 80058a6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <prvProcessReceivedCommands+0x78>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058d5 	.word	0x080058d5
 80058b0:	080058d5 	.word	0x080058d5
 80058b4:	080058d5 	.word	0x080058d5
 80058b8:	0800594b 	.word	0x0800594b
 80058bc:	0800595f 	.word	0x0800595f
 80058c0:	080059ab 	.word	0x080059ab
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058d5 	.word	0x080058d5
 80058cc:	0800594b 	.word	0x0800594b
 80058d0:	0800595f 	.word	0x0800595f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	18d1      	adds	r1, r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058f4:	f7ff ff5c 	bl	80057b0 <prvInsertTimerInActiveList>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d06c      	beq.n	80059d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005904:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d061      	beq.n	80059d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	441a      	add	r2, r3
 800591c:	2300      	movs	r3, #0
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	2300      	movs	r3, #0
 8005922:	2100      	movs	r1, #0
 8005924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005926:	f7ff fe01 	bl	800552c <xTimerGenericCommand>
 800592a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d152      	bne.n	80059d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	61bb      	str	r3, [r7, #24]
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	e7fd      	b.n	8005946 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800594a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	b2da      	uxtb	r2, r3
 8005956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005958:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800595c:	e03d      	b.n	80059da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800595e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005964:	f043 0301 	orr.w	r3, r3, #1
 8005968:	b2da      	uxtb	r2, r3
 800596a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005974:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10b      	bne.n	8005996 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	617b      	str	r3, [r7, #20]
}
 8005990:	bf00      	nop
 8005992:	bf00      	nop
 8005994:	e7fd      	b.n	8005992 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	18d1      	adds	r1, r2, r3
 800599e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059a4:	f7ff ff04 	bl	80057b0 <prvInsertTimerInActiveList>
					break;
 80059a8:	e017      	b.n	80059da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80059b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059ba:	f000 fc0d 	bl	80061d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059be:	e00c      	b.n	80059da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80059d2:	e002      	b.n	80059da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80059d4:	bf00      	nop
 80059d6:	e000      	b.n	80059da <prvProcessReceivedCommands+0x1a6>
					break;
 80059d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059da:	4b08      	ldr	r3, [pc, #32]	@ (80059fc <prvProcessReceivedCommands+0x1c8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	1d39      	adds	r1, r7, #4
 80059e0:	2200      	movs	r2, #0
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe f844 	bl	8003a70 <xQueueReceive>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f47f af26 	bne.w	800583c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	3730      	adds	r7, #48	@ 0x30
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000ccc 	.word	0x20000ccc

08005a00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a06:	e049      	b.n	8005a9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a08:	4b2e      	ldr	r3, [pc, #184]	@ (8005ac4 <prvSwitchTimerLists+0xc4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a12:	4b2c      	ldr	r3, [pc, #176]	@ (8005ac4 <prvSwitchTimerLists+0xc4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fd fb5f 	bl	80030e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d02f      	beq.n	8005a9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4413      	add	r3, r2
 8005a44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d90e      	bls.n	8005a6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac4 <prvSwitchTimerLists+0xc4>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f7fd fb04 	bl	8003072 <vListInsert>
 8005a6a:	e017      	b.n	8005a9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	2300      	movs	r3, #0
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	2100      	movs	r1, #0
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7ff fd58 	bl	800552c <xTimerGenericCommand>
 8005a7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	603b      	str	r3, [r7, #0]
}
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	e7fd      	b.n	8005a98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a9c:	4b09      	ldr	r3, [pc, #36]	@ (8005ac4 <prvSwitchTimerLists+0xc4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1b0      	bne.n	8005a08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005aa6:	4b07      	ldr	r3, [pc, #28]	@ (8005ac4 <prvSwitchTimerLists+0xc4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005aac:	4b06      	ldr	r3, [pc, #24]	@ (8005ac8 <prvSwitchTimerLists+0xc8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a04      	ldr	r2, [pc, #16]	@ (8005ac4 <prvSwitchTimerLists+0xc4>)
 8005ab2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ab4:	4a04      	ldr	r2, [pc, #16]	@ (8005ac8 <prvSwitchTimerLists+0xc8>)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	6013      	str	r3, [r2, #0]
}
 8005aba:	bf00      	nop
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000cc4 	.word	0x20000cc4
 8005ac8:	20000cc8 	.word	0x20000cc8

08005acc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ad2:	f000 f991 	bl	8005df8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ad6:	4b15      	ldr	r3, [pc, #84]	@ (8005b2c <prvCheckForValidListAndQueue+0x60>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d120      	bne.n	8005b20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ade:	4814      	ldr	r0, [pc, #80]	@ (8005b30 <prvCheckForValidListAndQueue+0x64>)
 8005ae0:	f7fd fa76 	bl	8002fd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ae4:	4813      	ldr	r0, [pc, #76]	@ (8005b34 <prvCheckForValidListAndQueue+0x68>)
 8005ae6:	f7fd fa73 	bl	8002fd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005aea:	4b13      	ldr	r3, [pc, #76]	@ (8005b38 <prvCheckForValidListAndQueue+0x6c>)
 8005aec:	4a10      	ldr	r2, [pc, #64]	@ (8005b30 <prvCheckForValidListAndQueue+0x64>)
 8005aee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005af0:	4b12      	ldr	r3, [pc, #72]	@ (8005b3c <prvCheckForValidListAndQueue+0x70>)
 8005af2:	4a10      	ldr	r2, [pc, #64]	@ (8005b34 <prvCheckForValidListAndQueue+0x68>)
 8005af4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005af6:	2300      	movs	r3, #0
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <prvCheckForValidListAndQueue+0x74>)
 8005afc:	4a11      	ldr	r2, [pc, #68]	@ (8005b44 <prvCheckForValidListAndQueue+0x78>)
 8005afe:	2110      	movs	r1, #16
 8005b00:	200a      	movs	r0, #10
 8005b02:	f7fd fb83 	bl	800320c <xQueueGenericCreateStatic>
 8005b06:	4603      	mov	r3, r0
 8005b08:	4a08      	ldr	r2, [pc, #32]	@ (8005b2c <prvCheckForValidListAndQueue+0x60>)
 8005b0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b0c:	4b07      	ldr	r3, [pc, #28]	@ (8005b2c <prvCheckForValidListAndQueue+0x60>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b14:	4b05      	ldr	r3, [pc, #20]	@ (8005b2c <prvCheckForValidListAndQueue+0x60>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	490b      	ldr	r1, [pc, #44]	@ (8005b48 <prvCheckForValidListAndQueue+0x7c>)
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe fb68 	bl	80041f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b20:	f000 f99c 	bl	8005e5c <vPortExitCritical>
}
 8005b24:	bf00      	nop
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20000ccc 	.word	0x20000ccc
 8005b30:	20000c9c 	.word	0x20000c9c
 8005b34:	20000cb0 	.word	0x20000cb0
 8005b38:	20000cc4 	.word	0x20000cc4
 8005b3c:	20000cc8 	.word	0x20000cc8
 8005b40:	20000d78 	.word	0x20000d78
 8005b44:	20000cd8 	.word	0x20000cd8
 8005b48:	080064cc 	.word	0x080064cc

08005b4c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10b      	bne.n	8005b76 <pvTimerGetTimerID+0x2a>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	60fb      	str	r3, [r7, #12]
}
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	e7fd      	b.n	8005b72 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8005b76:	f000 f93f 	bl	8005df8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005b80:	f000 f96c 	bl	8005e5c <vPortExitCritical>

	return pvReturn;
 8005b84:	693b      	ldr	r3, [r7, #16]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3b04      	subs	r3, #4
 8005ba0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3b04      	subs	r3, #4
 8005bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f023 0201 	bic.w	r2, r3, #1
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3b04      	subs	r3, #4
 8005bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8005bf4 <pxPortInitialiseStack+0x64>)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3b14      	subs	r3, #20
 8005bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3b04      	subs	r3, #4
 8005bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f06f 0202 	mvn.w	r2, #2
 8005bde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3b20      	subs	r3, #32
 8005be4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005be6:	68fb      	ldr	r3, [r7, #12]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	08005bf9 	.word	0x08005bf9

08005bf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c02:	4b13      	ldr	r3, [pc, #76]	@ (8005c50 <prvTaskExitError+0x58>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d00b      	beq.n	8005c24 <prvTaskExitError+0x2c>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60fb      	str	r3, [r7, #12]
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	e7fd      	b.n	8005c20 <prvTaskExitError+0x28>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60bb      	str	r3, [r7, #8]
}
 8005c36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c38:	bf00      	nop
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0fc      	beq.n	8005c3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	2000000c 	.word	0x2000000c
	...

08005c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c60:	4b07      	ldr	r3, [pc, #28]	@ (8005c80 <pxCurrentTCBConst2>)
 8005c62:	6819      	ldr	r1, [r3, #0]
 8005c64:	6808      	ldr	r0, [r1, #0]
 8005c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6a:	f380 8809 	msr	PSP, r0
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f04f 0000 	mov.w	r0, #0
 8005c76:	f380 8811 	msr	BASEPRI, r0
 8005c7a:	4770      	bx	lr
 8005c7c:	f3af 8000 	nop.w

08005c80 <pxCurrentTCBConst2>:
 8005c80:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop

08005c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c88:	4808      	ldr	r0, [pc, #32]	@ (8005cac <prvPortStartFirstTask+0x24>)
 8005c8a:	6800      	ldr	r0, [r0, #0]
 8005c8c:	6800      	ldr	r0, [r0, #0]
 8005c8e:	f380 8808 	msr	MSP, r0
 8005c92:	f04f 0000 	mov.w	r0, #0
 8005c96:	f380 8814 	msr	CONTROL, r0
 8005c9a:	b662      	cpsie	i
 8005c9c:	b661      	cpsie	f
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	df00      	svc	0
 8005ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005caa:	bf00      	nop
 8005cac:	e000ed08 	.word	0xe000ed08

08005cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cb6:	4b47      	ldr	r3, [pc, #284]	@ (8005dd4 <xPortStartScheduler+0x124>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a47      	ldr	r2, [pc, #284]	@ (8005dd8 <xPortStartScheduler+0x128>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10b      	bne.n	8005cd8 <xPortStartScheduler+0x28>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	60fb      	str	r3, [r7, #12]
}
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	e7fd      	b.n	8005cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8005dd4 <xPortStartScheduler+0x124>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8005ddc <xPortStartScheduler+0x12c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d10b      	bne.n	8005cfa <xPortStartScheduler+0x4a>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	613b      	str	r3, [r7, #16]
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop
 8005cf8:	e7fd      	b.n	8005cf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cfa:	4b39      	ldr	r3, [pc, #228]	@ (8005de0 <xPortStartScheduler+0x130>)
 8005cfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	22ff      	movs	r2, #255	@ 0xff
 8005d0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	4b31      	ldr	r3, [pc, #196]	@ (8005de4 <xPortStartScheduler+0x134>)
 8005d20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d22:	4b31      	ldr	r3, [pc, #196]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d24:	2207      	movs	r2, #7
 8005d26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d28:	e009      	b.n	8005d3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	4a2d      	ldr	r2, [pc, #180]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d46:	2b80      	cmp	r3, #128	@ 0x80
 8005d48:	d0ef      	beq.n	8005d2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d4a:	4b27      	ldr	r3, [pc, #156]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f1c3 0307 	rsb	r3, r3, #7
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d00b      	beq.n	8005d6e <xPortStartScheduler+0xbe>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	60bb      	str	r3, [r7, #8]
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	e7fd      	b.n	8005d6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	4a1c      	ldr	r2, [pc, #112]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d78:	4b1b      	ldr	r3, [pc, #108]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d80:	4a19      	ldr	r2, [pc, #100]	@ (8005de8 <xPortStartScheduler+0x138>)
 8005d82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d8c:	4b17      	ldr	r3, [pc, #92]	@ (8005dec <xPortStartScheduler+0x13c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a16      	ldr	r2, [pc, #88]	@ (8005dec <xPortStartScheduler+0x13c>)
 8005d92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d98:	4b14      	ldr	r3, [pc, #80]	@ (8005dec <xPortStartScheduler+0x13c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a13      	ldr	r2, [pc, #76]	@ (8005dec <xPortStartScheduler+0x13c>)
 8005d9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005da2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005da4:	f000 f8da 	bl	8005f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005da8:	4b11      	ldr	r3, [pc, #68]	@ (8005df0 <xPortStartScheduler+0x140>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dae:	f000 f8f9 	bl	8005fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005db2:	4b10      	ldr	r3, [pc, #64]	@ (8005df4 <xPortStartScheduler+0x144>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a0f      	ldr	r2, [pc, #60]	@ (8005df4 <xPortStartScheduler+0x144>)
 8005db8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005dbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dbe:	f7ff ff63 	bl	8005c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dc2:	f7fe fe69 	bl	8004a98 <vTaskSwitchContext>
	prvTaskExitError();
 8005dc6:	f7ff ff17 	bl	8005bf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	e000ed00 	.word	0xe000ed00
 8005dd8:	410fc271 	.word	0x410fc271
 8005ddc:	410fc270 	.word	0x410fc270
 8005de0:	e000e400 	.word	0xe000e400
 8005de4:	20000dc8 	.word	0x20000dc8
 8005de8:	20000dcc 	.word	0x20000dcc
 8005dec:	e000ed20 	.word	0xe000ed20
 8005df0:	2000000c 	.word	0x2000000c
 8005df4:	e000ef34 	.word	0xe000ef34

08005df8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	607b      	str	r3, [r7, #4]
}
 8005e10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e12:	4b10      	ldr	r3, [pc, #64]	@ (8005e54 <vPortEnterCritical+0x5c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3301      	adds	r3, #1
 8005e18:	4a0e      	ldr	r2, [pc, #56]	@ (8005e54 <vPortEnterCritical+0x5c>)
 8005e1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <vPortEnterCritical+0x5c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d110      	bne.n	8005e46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e24:	4b0c      	ldr	r3, [pc, #48]	@ (8005e58 <vPortEnterCritical+0x60>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <vPortEnterCritical+0x4e>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	603b      	str	r3, [r7, #0]
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	e7fd      	b.n	8005e42 <vPortEnterCritical+0x4a>
	}
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	2000000c 	.word	0x2000000c
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e62:	4b12      	ldr	r3, [pc, #72]	@ (8005eac <vPortExitCritical+0x50>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <vPortExitCritical+0x26>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	607b      	str	r3, [r7, #4]
}
 8005e7c:	bf00      	nop
 8005e7e:	bf00      	nop
 8005e80:	e7fd      	b.n	8005e7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e82:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <vPortExitCritical+0x50>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	4a08      	ldr	r2, [pc, #32]	@ (8005eac <vPortExitCritical+0x50>)
 8005e8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e8c:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <vPortExitCritical+0x50>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d105      	bne.n	8005ea0 <vPortExitCritical+0x44>
 8005e94:	2300      	movs	r3, #0
 8005e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f383 8811 	msr	BASEPRI, r3
}
 8005e9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	2000000c 	.word	0x2000000c

08005eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005eb0:	f3ef 8009 	mrs	r0, PSP
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	4b15      	ldr	r3, [pc, #84]	@ (8005f10 <pxCurrentTCBConst>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	f01e 0f10 	tst.w	lr, #16
 8005ec0:	bf08      	it	eq
 8005ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eca:	6010      	str	r0, [r2, #0]
 8005ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ed4:	f380 8811 	msr	BASEPRI, r0
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f7fe fdda 	bl	8004a98 <vTaskSwitchContext>
 8005ee4:	f04f 0000 	mov.w	r0, #0
 8005ee8:	f380 8811 	msr	BASEPRI, r0
 8005eec:	bc09      	pop	{r0, r3}
 8005eee:	6819      	ldr	r1, [r3, #0]
 8005ef0:	6808      	ldr	r0, [r1, #0]
 8005ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef6:	f01e 0f10 	tst.w	lr, #16
 8005efa:	bf08      	it	eq
 8005efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f00:	f380 8809 	msr	PSP, r0
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	f3af 8000 	nop.w

08005f10 <pxCurrentTCBConst>:
 8005f10:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	607b      	str	r3, [r7, #4]
}
 8005f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f32:	f7fe fcf7 	bl	8004924 <xTaskIncrementTick>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <xPortSysTickHandler+0x40>)
 8005f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	2300      	movs	r3, #0
 8005f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	f383 8811 	msr	BASEPRI, r3
}
 8005f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	e000ed04 	.word	0xe000ed04

08005f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f60:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <vPortSetupTimerInterrupt+0x34>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f66:	4b0b      	ldr	r3, [pc, #44]	@ (8005f94 <vPortSetupTimerInterrupt+0x38>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f98 <vPortSetupTimerInterrupt+0x3c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a0a      	ldr	r2, [pc, #40]	@ (8005f9c <vPortSetupTimerInterrupt+0x40>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	099b      	lsrs	r3, r3, #6
 8005f78:	4a09      	ldr	r2, [pc, #36]	@ (8005fa0 <vPortSetupTimerInterrupt+0x44>)
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f7e:	4b04      	ldr	r3, [pc, #16]	@ (8005f90 <vPortSetupTimerInterrupt+0x34>)
 8005f80:	2207      	movs	r2, #7
 8005f82:	601a      	str	r2, [r3, #0]
}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	e000e010 	.word	0xe000e010
 8005f94:	e000e018 	.word	0xe000e018
 8005f98:	20000000 	.word	0x20000000
 8005f9c:	10624dd3 	.word	0x10624dd3
 8005fa0:	e000e014 	.word	0xe000e014

08005fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005fb4 <vPortEnableVFP+0x10>
 8005fa8:	6801      	ldr	r1, [r0, #0]
 8005faa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005fae:	6001      	str	r1, [r0, #0]
 8005fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fb2:	bf00      	nop
 8005fb4:	e000ed88 	.word	0xe000ed88

08005fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fbe:	f3ef 8305 	mrs	r3, IPSR
 8005fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b0f      	cmp	r3, #15
 8005fc8:	d915      	bls.n	8005ff6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fca:	4a18      	ldr	r2, [pc, #96]	@ (800602c <vPortValidateInterruptPriority+0x74>)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fd4:	4b16      	ldr	r3, [pc, #88]	@ (8006030 <vPortValidateInterruptPriority+0x78>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	7afa      	ldrb	r2, [r7, #11]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d20b      	bcs.n	8005ff6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	607b      	str	r3, [r7, #4]
}
 8005ff0:	bf00      	nop
 8005ff2:	bf00      	nop
 8005ff4:	e7fd      	b.n	8005ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8006034 <vPortValidateInterruptPriority+0x7c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8006038 <vPortValidateInterruptPriority+0x80>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d90b      	bls.n	800601e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	603b      	str	r3, [r7, #0]
}
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	e7fd      	b.n	800601a <vPortValidateInterruptPriority+0x62>
	}
 800601e:	bf00      	nop
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	e000e3f0 	.word	0xe000e3f0
 8006030:	20000dc8 	.word	0x20000dc8
 8006034:	e000ed0c 	.word	0xe000ed0c
 8006038:	20000dcc 	.word	0x20000dcc

0800603c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08a      	sub	sp, #40	@ 0x28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006044:	2300      	movs	r3, #0
 8006046:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006048:	f7fe fb9e 	bl	8004788 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800604c:	4b5c      	ldr	r3, [pc, #368]	@ (80061c0 <pvPortMalloc+0x184>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006054:	f000 f924 	bl	80062a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006058:	4b5a      	ldr	r3, [pc, #360]	@ (80061c4 <pvPortMalloc+0x188>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4013      	ands	r3, r2
 8006060:	2b00      	cmp	r3, #0
 8006062:	f040 8095 	bne.w	8006190 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01e      	beq.n	80060aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800606c:	2208      	movs	r2, #8
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4413      	add	r3, r2
 8006072:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	2b00      	cmp	r3, #0
 800607c:	d015      	beq.n	80060aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f023 0307 	bic.w	r3, r3, #7
 8006084:	3308      	adds	r3, #8
 8006086:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00b      	beq.n	80060aa <pvPortMalloc+0x6e>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	617b      	str	r3, [r7, #20]
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	e7fd      	b.n	80060a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d06f      	beq.n	8006190 <pvPortMalloc+0x154>
 80060b0:	4b45      	ldr	r3, [pc, #276]	@ (80061c8 <pvPortMalloc+0x18c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d86a      	bhi.n	8006190 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060ba:	4b44      	ldr	r3, [pc, #272]	@ (80061cc <pvPortMalloc+0x190>)
 80060bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060be:	4b43      	ldr	r3, [pc, #268]	@ (80061cc <pvPortMalloc+0x190>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060c4:	e004      	b.n	80060d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d903      	bls.n	80060e2 <pvPortMalloc+0xa6>
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f1      	bne.n	80060c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060e2:	4b37      	ldr	r3, [pc, #220]	@ (80061c0 <pvPortMalloc+0x184>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d051      	beq.n	8006190 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2208      	movs	r2, #8
 80060f2:	4413      	add	r3, r2
 80060f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	1ad2      	subs	r2, r2, r3
 8006106:	2308      	movs	r3, #8
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	429a      	cmp	r2, r3
 800610c:	d920      	bls.n	8006150 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800610e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4413      	add	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <pvPortMalloc+0xfc>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	613b      	str	r3, [r7, #16]
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	e7fd      	b.n	8006134 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	1ad2      	subs	r2, r2, r3
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800614a:	69b8      	ldr	r0, [r7, #24]
 800614c:	f000 f90a 	bl	8006364 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006150:	4b1d      	ldr	r3, [pc, #116]	@ (80061c8 <pvPortMalloc+0x18c>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	4a1b      	ldr	r2, [pc, #108]	@ (80061c8 <pvPortMalloc+0x18c>)
 800615c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800615e:	4b1a      	ldr	r3, [pc, #104]	@ (80061c8 <pvPortMalloc+0x18c>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b1b      	ldr	r3, [pc, #108]	@ (80061d0 <pvPortMalloc+0x194>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d203      	bcs.n	8006172 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800616a:	4b17      	ldr	r3, [pc, #92]	@ (80061c8 <pvPortMalloc+0x18c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a18      	ldr	r2, [pc, #96]	@ (80061d0 <pvPortMalloc+0x194>)
 8006170:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	4b13      	ldr	r3, [pc, #76]	@ (80061c4 <pvPortMalloc+0x188>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	431a      	orrs	r2, r3
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006186:	4b13      	ldr	r3, [pc, #76]	@ (80061d4 <pvPortMalloc+0x198>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3301      	adds	r3, #1
 800618c:	4a11      	ldr	r2, [pc, #68]	@ (80061d4 <pvPortMalloc+0x198>)
 800618e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006190:	f7fe fb08 	bl	80047a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <pvPortMalloc+0x17a>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	60fb      	str	r3, [r7, #12]
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	e7fd      	b.n	80061b2 <pvPortMalloc+0x176>
	return pvReturn;
 80061b6:	69fb      	ldr	r3, [r7, #28]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3728      	adds	r7, #40	@ 0x28
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20001990 	.word	0x20001990
 80061c4:	200019a4 	.word	0x200019a4
 80061c8:	20001994 	.word	0x20001994
 80061cc:	20001988 	.word	0x20001988
 80061d0:	20001998 	.word	0x20001998
 80061d4:	2000199c 	.word	0x2000199c

080061d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d04f      	beq.n	800628a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061ea:	2308      	movs	r3, #8
 80061ec:	425b      	negs	r3, r3
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	4b25      	ldr	r3, [pc, #148]	@ (8006294 <vPortFree+0xbc>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4013      	ands	r3, r2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10b      	bne.n	800621e <vPortFree+0x46>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60fb      	str	r3, [r7, #12]
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	e7fd      	b.n	800621a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <vPortFree+0x66>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	60bb      	str	r3, [r7, #8]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	4b14      	ldr	r3, [pc, #80]	@ (8006294 <vPortFree+0xbc>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4013      	ands	r3, r2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01e      	beq.n	800628a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d11a      	bne.n	800628a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	4b0e      	ldr	r3, [pc, #56]	@ (8006294 <vPortFree+0xbc>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	43db      	mvns	r3, r3
 800625e:	401a      	ands	r2, r3
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006264:	f7fe fa90 	bl	8004788 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	4b0a      	ldr	r3, [pc, #40]	@ (8006298 <vPortFree+0xc0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4413      	add	r3, r2
 8006272:	4a09      	ldr	r2, [pc, #36]	@ (8006298 <vPortFree+0xc0>)
 8006274:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006276:	6938      	ldr	r0, [r7, #16]
 8006278:	f000 f874 	bl	8006364 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800627c:	4b07      	ldr	r3, [pc, #28]	@ (800629c <vPortFree+0xc4>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	4a06      	ldr	r2, [pc, #24]	@ (800629c <vPortFree+0xc4>)
 8006284:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006286:	f7fe fa8d 	bl	80047a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800628a:	bf00      	nop
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	200019a4 	.word	0x200019a4
 8006298:	20001994 	.word	0x20001994
 800629c:	200019a0 	.word	0x200019a0

080062a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062a6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80062aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062ac:	4b27      	ldr	r3, [pc, #156]	@ (800634c <prvHeapInit+0xac>)
 80062ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3307      	adds	r3, #7
 80062be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0307 	bic.w	r3, r3, #7
 80062c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	4a1f      	ldr	r2, [pc, #124]	@ (800634c <prvHeapInit+0xac>)
 80062d0:	4413      	add	r3, r2
 80062d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006350 <prvHeapInit+0xb0>)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062de:	4b1c      	ldr	r3, [pc, #112]	@ (8006350 <prvHeapInit+0xb0>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	4413      	add	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062ec:	2208      	movs	r2, #8
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0307 	bic.w	r3, r3, #7
 80062fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4a15      	ldr	r2, [pc, #84]	@ (8006354 <prvHeapInit+0xb4>)
 8006300:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006302:	4b14      	ldr	r3, [pc, #80]	@ (8006354 <prvHeapInit+0xb4>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2200      	movs	r2, #0
 8006308:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800630a:	4b12      	ldr	r3, [pc, #72]	@ (8006354 <prvHeapInit+0xb4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	1ad2      	subs	r2, r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006320:	4b0c      	ldr	r3, [pc, #48]	@ (8006354 <prvHeapInit+0xb4>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	4a0a      	ldr	r2, [pc, #40]	@ (8006358 <prvHeapInit+0xb8>)
 800632e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	4a09      	ldr	r2, [pc, #36]	@ (800635c <prvHeapInit+0xbc>)
 8006336:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006338:	4b09      	ldr	r3, [pc, #36]	@ (8006360 <prvHeapInit+0xc0>)
 800633a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800633e:	601a      	str	r2, [r3, #0]
}
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	20000dd0 	.word	0x20000dd0
 8006350:	20001988 	.word	0x20001988
 8006354:	20001990 	.word	0x20001990
 8006358:	20001998 	.word	0x20001998
 800635c:	20001994 	.word	0x20001994
 8006360:	200019a4 	.word	0x200019a4

08006364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800636c:	4b28      	ldr	r3, [pc, #160]	@ (8006410 <prvInsertBlockIntoFreeList+0xac>)
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e002      	b.n	8006378 <prvInsertBlockIntoFreeList+0x14>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	429a      	cmp	r2, r3
 8006380:	d8f7      	bhi.n	8006372 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	4413      	add	r3, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	d108      	bne.n	80063a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	441a      	add	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	441a      	add	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d118      	bne.n	80063ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	4b15      	ldr	r3, [pc, #84]	@ (8006414 <prvInsertBlockIntoFreeList+0xb0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d00d      	beq.n	80063e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	441a      	add	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	e008      	b.n	80063f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006414 <prvInsertBlockIntoFreeList+0xb0>)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	e003      	b.n	80063f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d002      	beq.n	8006402 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	20001988 	.word	0x20001988
 8006414:	20001990 	.word	0x20001990

08006418 <memset>:
 8006418:	4402      	add	r2, r0
 800641a:	4603      	mov	r3, r0
 800641c:	4293      	cmp	r3, r2
 800641e:	d100      	bne.n	8006422 <memset+0xa>
 8006420:	4770      	bx	lr
 8006422:	f803 1b01 	strb.w	r1, [r3], #1
 8006426:	e7f9      	b.n	800641c <memset+0x4>

08006428 <__libc_init_array>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	4d0d      	ldr	r5, [pc, #52]	@ (8006460 <__libc_init_array+0x38>)
 800642c:	4c0d      	ldr	r4, [pc, #52]	@ (8006464 <__libc_init_array+0x3c>)
 800642e:	1b64      	subs	r4, r4, r5
 8006430:	10a4      	asrs	r4, r4, #2
 8006432:	2600      	movs	r6, #0
 8006434:	42a6      	cmp	r6, r4
 8006436:	d109      	bne.n	800644c <__libc_init_array+0x24>
 8006438:	4d0b      	ldr	r5, [pc, #44]	@ (8006468 <__libc_init_array+0x40>)
 800643a:	4c0c      	ldr	r4, [pc, #48]	@ (800646c <__libc_init_array+0x44>)
 800643c:	f000 f826 	bl	800648c <_init>
 8006440:	1b64      	subs	r4, r4, r5
 8006442:	10a4      	asrs	r4, r4, #2
 8006444:	2600      	movs	r6, #0
 8006446:	42a6      	cmp	r6, r4
 8006448:	d105      	bne.n	8006456 <__libc_init_array+0x2e>
 800644a:	bd70      	pop	{r4, r5, r6, pc}
 800644c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006450:	4798      	blx	r3
 8006452:	3601      	adds	r6, #1
 8006454:	e7ee      	b.n	8006434 <__libc_init_array+0xc>
 8006456:	f855 3b04 	ldr.w	r3, [r5], #4
 800645a:	4798      	blx	r3
 800645c:	3601      	adds	r6, #1
 800645e:	e7f2      	b.n	8006446 <__libc_init_array+0x1e>
 8006460:	0800655c 	.word	0x0800655c
 8006464:	0800655c 	.word	0x0800655c
 8006468:	0800655c 	.word	0x0800655c
 800646c:	08006560 	.word	0x08006560

08006470 <memcpy>:
 8006470:	440a      	add	r2, r1
 8006472:	4291      	cmp	r1, r2
 8006474:	f100 33ff 	add.w	r3, r0, #4294967295
 8006478:	d100      	bne.n	800647c <memcpy+0xc>
 800647a:	4770      	bx	lr
 800647c:	b510      	push	{r4, lr}
 800647e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006486:	4291      	cmp	r1, r2
 8006488:	d1f9      	bne.n	800647e <memcpy+0xe>
 800648a:	bd10      	pop	{r4, pc}

0800648c <_init>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	bf00      	nop
 8006490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006492:	bc08      	pop	{r3}
 8006494:	469e      	mov	lr, r3
 8006496:	4770      	bx	lr

08006498 <_fini>:
 8006498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649a:	bf00      	nop
 800649c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649e:	bc08      	pop	{r3}
 80064a0:	469e      	mov	lr, r3
 80064a2:	4770      	bx	lr
